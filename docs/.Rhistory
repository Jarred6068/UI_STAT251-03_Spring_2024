xlab('Resolution Value')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform, aes(x = input_graph, y = Louvain.middle, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.top, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#plotted over gamma parameter
ggplot(data = longform, aes(x = gamma, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#plotted over gamma parameter
ggplot(data = longform, aes(x = gamma, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
library(ggubr)
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/MASTER_results.csv')
longform = cbind.data.frame(metric = as.factor(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1]))),
network = as.factor(rep(tab$Network_type, 3)),
input_graph = as.factor(rep(tab$input_graph, 3)),
gamma = as.factor(rep(tab$Gamma, 3)),
resolution_top = as.factor(rep(tab$Resolution_top, 3)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 3)),
Top.stats = c(tab$Top_homogeneity, tab$Top_completeness, tab$Top_NMI),
Mid.stats = c(tab$Middle_homogeneity, tab$Middle_Completeness, tab$Middle_NMI),
Louvain.top = c(tab$Louvain_homogenity_top,
tab$Louvain_completeness_top,
tab$Louvain_NMI_top),
Louvain.middle = c(tab$Louvain_homogenity_middle,
tab$Louvain_completeness_middle,
tab$Louvain_NMI_middle))
longform2 = cbind.data.frame(method = as.factor(c(rep('HCD', dim(longform)[1]),
rep('Louvain', dim(longform)[1]))),
metric = as.factor(rep(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1])), 2)),
network = as.factor(rep(tab$Network_type, 6)),
input_graph = as.factor(rep(tab$input_graph, 6)),
gamma = as.factor(rep(tab$Gamma, 6)),
resolution_top = as.factor(rep(tab$Resolution_top, 6)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 6)),
stats.top = c(longform$Top.stats, longform$Louvain.top),
stats.mid = c(longform$Mid.stats, longform$Louvain.top))
ggplot(data = longform2, aes(x = method, y = stats.top,
fill = metric, linetype = input_graph))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
library(ggpubr)
ggplot(data = longform2, aes(x = method, y = stats.top,
fill = metric, linetype = input_graph))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.top,
fill = metric, linetype = network))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
?geom_boxplot
ggplot(data = longform2, aes(x = method, y = stats.top,
fill = metric, shape = network))+
geom_boxplot()+
geom_point()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.top,
fill = metric, shape = network))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
longform2$network
#Top level comparison
#smallworld network
lf1.1 = subset(longform2, network == 'small world')
ggplot(data = lf1.1, aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#scale free
lf1.2 = subset(longform2, network == 'scale free')
ggplot(data = lf1.2, aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#random graph
lf1.3 = subset(longform2, network == 'random graph')
ggplot(data = lf1.3, aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
test1 = subset(longform2, network == 'small world' && gamma = 0)
test1 = subset(longform2, network == 'small world' && gamma == 0)
ggplot(data = test1, aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
head(longform2)
summary(as.factor(longform2$gamma))
test1 = subset(longform2, gamma == 0)
ggplot(data = subset(test1,network == 'small world'), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = subset(test1,network == 'scale free'), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = subset(test1,network == 'random graph'), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#comparing Louvain and HCD:
#comparing on middle level
#smallworld network
lf1.1 = subset(longform2, network == 'small world')
ggplot(data = lf1.1, aes(x = method, y = stats.mid,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#scale free
lf1.2 = subset(longform2, network == 'scale free')
ggplot(data = lf1.2, aes(x = method, y = stats.mid,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#random graph
lf1.3 = subset(longform2, network == 'random graph')
ggplot(data = lf1.3, aes(x = method, y = stats.mid,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = subset(test1,network == 'random graph' & resolution_middle == 100), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
rlang::last_trace()
ggplot(data = subset(test1,network == 'random graph' | resolution_middle == 100), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
subset(longform2, resolution_middle == 100)
ggplot(data = subset(test1,network == 'random graph' & resolution_middle == 100), aes(x = method, y = stats.top,
fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggthemes)
library(ggpubr)
x = c(5, 6, 6, 7, 7, 7, 8, 9, 9, 10)
cts = summary(as.factor(x))
kable(cbind.data.frame(x, cts), format = 'html', col.names = c('Score','Frequency'), digits = 2, row.names = F, booktabs = T)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
x = c(5, 6, 6, 7, 7, 7, 8, 9, 9, 10)
cts = summary(as.factor(x))
kable(cbind.data.frame(unique(x), cts), format = 'html', col.names = c('Score','Frequency'), digits = 2, row.names = F, booktabs = T)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
x = c(5, 6, 6, 7, 7, 7, 8, 9, 9, 10)
cts = summary(as.factor(x))
rf = cts/length(x)
kable(cbind.data.frame(unique(x), cts, rf), format = 'html', col.names = c('Score','Frequency', 'Relative Frequency'), digits = 2, row.names = F, booktabs = T)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
library(ggplot2)
library(ggthemes)
set.seed(123)
N = 100
p = 0.65
n = 20
`Identification Number` = paste("FN", sample(c(2000:2999), n), sep = "-")
`Duty Posting` = sample(c("Death Star", "Fondor Ship Yard", "Corellia", "Berchest Station", "Lothal"), n,
replace = T)
`Height (cm)` = round(rnorm(n, mean = 190.5, sd = 3.3),1)
Age = round(rnorm(n, mean = 21, sd = 2))
`Blaster Accuracy` = rbinom(n, size = N, p = p)/N
Rank = sample(c('PV1', 'PV2', "PFC", "CPL"), prob = c(0.4, 0.3, 0.2, 0.1))
st.data = cbind.data.frame(`Identification Number`, `Duty Posting`, `Height (cm)`, Age, `Blaster Accuracy`, Rank)
library(HSAUR2)
skull.data = rbind.data.frame(skulls[1:15,], skulls[145:150,])
ggplot(skulls, aes(x = bl, fill = factor(epoch))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1, binpositions = "all", dotsize = 0.5)+
theme_classic()+
ylab("")+
xlab("Waiting Time Until Erapution (Min)")+
theme(axis.text.x = element_text(size = 15), axis.text.y = element_blank(),
axis.title.x = element_text(size = 18), axis.title.y = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.position = 'top')+
labs(fill = 'Number of Cylinders')
X = runif(500)
Y = runif(500)
ex = cbind.data.frame(X,Y)
coords1 = seq(0.1, 1, 0.1)
ymax = sample(coords1, 10)
xmax = sample(coords1, 10)
A = ggplot(data = ex)+
geom_rect(xmin=xmax[1]-0.1, xmax=xmax[1], ymin = ymax[1]-0.1, ymax = ymax[1], fill = 'lightgrey')+
geom_rect(xmin=xmax[2]-0.1, xmax=xmax[2], ymin = ymax[2]-0.1, ymax = ymax[2], fill = 'lightgrey')+
geom_rect(xmin=xmax[3]-0.1, xmax=xmax[3], ymin = ymax[3]-0.1, ymax = ymax[3], fill = 'lightgrey')+
geom_rect(xmin=xmax[4]-0.1, xmax=xmax[4], ymin = ymax[4]-0.1, ymax = ymax[4], fill = 'lightgrey')+
geom_rect(xmin=xmax[5]-0.1, xmax=xmax[5], ymin = ymax[5]-0.1, ymax = ymax[5], fill = 'lightgrey')+
geom_rect(xmin=xmax[6]-0.1, xmax=xmax[6], ymin = ymax[6]-0.1, ymax = ymax[6], fill = 'lightgrey')+
geom_rect(xmin=xmax[7]-0.1, xmax=xmax[7], ymin = ymax[7]-0.1, ymax = ymax[7], fill = 'lightgrey')+
geom_rect(xmin=xmax[8]-0.1, xmax=xmax[8], ymin = ymax[8]-0.1, ymax = ymax[8], fill = 'lightgrey')+
geom_rect(xmin=xmax[9]-0.1, xmax=xmax[9], ymin = ymax[9]-0.1, ymax = ymax[9], fill = 'lightgrey')+
geom_rect(xmin=xmax[10]-0.1, xmax=xmax[10], ymin = ymax[10]-0.1, ymax = ymax[10], fill = 'lightgrey')+
geom_point(aes(X, Y), size = 0.8)+
scale_x_continuous(breaks = seq(0, 1, 0.1))+
scale_y_continuous(breaks = seq(0, 1, 0.1))+
theme_void()+
geom_vline(xintercept = seq(0,1, 0.1), linetype = 'dotted')+
geom_hline(yintercept = seq(0,1, 0.1), linetype = 'dashed')+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
xlab(element_blank())+
ylab(element_blank())
plot(A)
plot(A)
library(dplyr)
datnew = cbind.data.frame(`Duty Posting` = names(summary(as.factor(st.data$`Duty Posting`))),
value = summary(as.factor(st.data$`Duty Posting`)))
data <- datnew %>%
arrange(desc(`Duty Posting`)) %>%
mutate(prop = datnew$value / sum(datnew$value) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
# Basic piechart
pie = ggplot(data, aes(x="", y=prop, fill=`Duty Posting`)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
library(scales)
pie + scale_fill_brewer("Blues")  +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(y = prop/2 + c(0, cumsum(prop)[-length(prop)]),
label = percent(prop/100)), size=5)+
guides(fill=guide_legend(title="Duty Posting"))
#student attention likert responses
set.seed(123)
teen.data = cbind.data.frame(Response = factor(c("Often", "Sometimes", "Rarely", 'Never'),
levels = c('Never', "Rarely", "Sometimes", "Often")),
`Proportion of Teens`= c(0.08,0.24,0.29,0.39))
P1 = ggplot(data = teen.data, aes(x = Response, y = `Proportion of Teens`, fill = Response))+
geom_bar(stat = 'identity', color = 'black', size = 0.8)+
theme_hc()+
scale_y_continuous(breaks = seq(0, 0.5, 0.1))+
coord_flip()
plot(P1)
plot(P1+scale_fill_brewer(palette = 'Reds')+theme(legend.position = 'none')+
theme(axis.text.x = element_text(size = 15))+
theme(axis.text.y = element_text(size = 15, angle = 45))+
theme(axis.title.x = element_text(size = 18))+
theme(axis.title.y = element_text(size = 18))+
ggtitle("Are You Losing Focus In Class By Checking Your Cell Phone?"))
6/3.3
Student = c('1', '2', '3', '4', '\vdots', '743')
Age = c('13', '13', '15', '17', '\\vdots', '16')
Response = c('Never','Sometimes', 'Never', 'Often', '\\vdots', 'Rarely')
kable(cbind.data.frame(Student, Age, Response), format = 'html', digits = 2, row.names = F, booktabs = T, escape = FALSE)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
#student attention likert responses
set.seed(123)
teen.data = cbind.data.frame(Response = factor(c("Often", "Sometimes", "Rarely", 'Never'),
levels = c('Never', "Rarely", "Sometimes", "Often")),
`Proportion of Teens`= c(0.08,0.24,0.29,0.39))
P1 = ggplot(data = teen.data, aes(x = Response, y = `Proportion of Teens`, fill = Response))+
geom_bar(stat = 'identity', color = 'black', size = 0.8)+
theme_hc()+
scale_y_continuous(breaks = seq(0, 0.5, 0.1))+
coord_flip()
plot(P1+scale_fill_brewer(palette = 'Reds')+theme(legend.position = 'none')+
theme(axis.text.x = element_text(size = 15))+
theme(axis.text.y = element_text(size = 15, angle = 45))+
theme(axis.title.x = element_text(size = 18))+
theme(axis.title.y = element_text(size = 18))+
ggtitle("Are You Losing Focus In Class By Checking Your Cell Phone?"))
Student = c('1', '2', '3', '4', '$\vdots$', '743')
Age = c('13', '13', '15', '17', '$\vdots$', '16')
Response = c('Never','Sometimes', 'Never', 'Often', '$\vdots$', 'Rarely')
kable(cbind.data.frame(Student, Age, Response), format = 'html', digits = 2, row.names = F, booktabs = T, escape = FALSE)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
#student attention likert responses
set.seed(123)
teen.data = cbind.data.frame(Response = factor(c("Often", "Sometimes", "Rarely", 'Never'),
levels = c('Never', "Rarely", "Sometimes", "Often")),
`Proportion of Teens`= c(0.08,0.24,0.29,0.39))
P1 = ggplot(data = teen.data, aes(x = Response, y = `Proportion of Teens`, fill = Response))+
geom_bar(stat = 'identity', color = 'black', size = 0.8)+
theme_hc()+
scale_y_continuous(breaks = seq(0, 0.5, 0.1))+
coord_flip()
plot(P1+scale_fill_brewer(palette = 'Reds')+theme(legend.position = 'none')+
theme(axis.text.x = element_text(size = 15))+
theme(axis.text.y = element_text(size = 15, angle = 45))+
theme(axis.title.x = element_text(size = 18))+
theme(axis.title.y = element_text(size = 18))+
ggtitle("Are You Losing Focus In Class By Checking Your Cell Phone?"))
Student = c('1', '2', '3', '4', TeX('$\\vdots$'), '743')
library(latex2exp)
Student = c('1', '2', '3', '4', TeX('$\\vdots$'), '743')
Age = c('13', '13', '15', '17', TeX('$\\vdots$'), '16')
Response = c('Never','Sometimes', 'Never', 'Often', TeX('$\\vdots$'), 'Rarely')
kable(cbind.data.frame(Student, Age, Response), format = 'html', digits = 2, row.names = F, booktabs = T, escape = FALSE)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
Student = c('1', '2', '3', '4', '$\\vdots$', '743')
Age = c('13', '13', '15', '17', '$\\vdots$', '16')
Response = c('Never','Sometimes', 'Never', 'Often', '$\\vdots$', 'Rarely')
kable(cbind.data.frame(Student, Age, Response), format = 'html', digits = 2, row.names = F, booktabs = T, escape = FALSE)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
#student attention likert responses
set.seed(123)
teen.data = cbind.data.frame(Response = factor(c("Often", "Sometimes", "Rarely", 'Never'),
levels = c('Never', "Rarely", "Sometimes", "Often")),
`Proportion of Teens`= c(0.08,0.24,0.29,0.39))
P1 = ggplot(data = teen.data, aes(x = Response, y = `Proportion of Teens`, fill = Response))+
geom_bar(stat = 'identity', color = 'black', size = 0.8)+
theme_hc()+
scale_y_continuous(breaks = seq(0, 0.5, 0.1))+
coord_flip()
plot(P1+scale_fill_brewer(palette = 'Reds')+theme(legend.position = 'none')+
theme(axis.text.x = element_text(size = 15))+
theme(axis.text.y = element_text(size = 15, angle = 45))+
theme(axis.title.x = element_text(size = 18))+
theme(axis.title.y = element_text(size = 18))+
ggtitle("Are You Losing Focus In Class By Checking Your Cell Phone?"))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
