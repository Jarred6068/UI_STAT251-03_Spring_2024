k = 10
A = ggplot(data = df, aes(x = value, fill = Variable))+
geom_histogram(aes(y = ..density..), color = 'black', bins = 10)+
geom_density(aes(x = x), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
plot(A)
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value, fill = Variable))+
geom_histogram(aes(y = ..density..), color = 'black', bins = 10)+
geom_density(size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value, fill = Variable))+
geom_histogram(aes(y = ..density..), color = 'black', bins = 10)+
geom_density(size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 10, position = 'dodge2',alpha = 0.5)+
geom_density(size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value, fill = Variable, color = Variable))+
geom_histogram(aes(y = ..density..), color = 'black', bins = 10, position = 'dodge2',alpha = 0.5)+
geom_density(size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 10, position = 'dodge2',alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 10, position = 'dodge',alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 8, position = 'dodge',alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
x = rchisq(100, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',100), rep('Z',100)))
k = 10
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 8,alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
n1 = 1000
x = rchisq(n1, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',n1), rep('Z',n1)))
k = sqrt(n1)
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = 8,alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
n1 = 1000
x = rchisq(n1, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',n1), rep('Z',n1)))
k = ceiling(sqrt(n1))
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = k,alpha = 0.5)+
geom_density(aes(color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
hist(rchisq(100, 5))
hist(rchisq(100, 10))
set.seed(123)
n1 = 1000
x = rchisq(n1, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',n1), rep('Z',n1)))
k = ceiling(sqrt(n1))
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = k,alpha = 0.5)+
geom_density(aes(x = value, color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
set.seed(123)
n1 = 1000
x = rchisq(n1, 5)
z = (x-mean(x))/sd(x)
df = cbind.data.frame(value = c(x, z), Variable = c(rep('X',n1), rep('Z',n1)))
k = ceiling(sqrt(n1))
ggplot(data = df, aes(x = value))+
geom_histogram(aes(y = ..density.., fill = Variable), color = 'black', bins = k,alpha = 0.5)+
geom_density(aes(x = value, color = Variable), size = 1)+
theme_classic2()+
xlab('X')+
ggtitle('Distribution of X')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
hist(subset(df, Variable == "X"))
hist(subset(df, Variable == "X")$value)
?read.table
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=10, fig.pos = "H")
#knitr::opts_chunk$set(list(echo = FALSE, eval = FALSE))
library(kableExtra)
library(knitr)
library(latex2exp)
library(gridExtra)
library(ggpubr)
library(ggthemes)
library(plyr)
mainpath = 'C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/FALL/'
wmpath = 'C:/Users/Bruin/Desktop/GS Academia/SEM 2/STAT 519/PROJ 1/watermelon/simulated datasets/ wawamelon/WaterMelonMaster.csv'
whiskpath = 'C:/Users/Bruin/Desktop/GS Academia/SEM 2/STAT 519/PROJ 1/Whiskers/SimSealData/whiskerMaster.csv'
datapath = 'C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/FALL/data/'
read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T )
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T )
head(RL)
hist(RL$goals)
hist(RL$assists)
hist(RL$shots)
hist(RL$goals.conceded.while.last.defender)
hist(RL$amount.collected)
hist(RL$opposing.team.name)
RL$opposing.team.name
hist(RL$score)
hist(RL$shots.conceded)
hist(RL$shooting.percentage)
hist(RL$amount.stolen)
hist(RL$score)
hist(RL$goals/RL$assists)
hist(RL$goals/RL$score)
hist(RL$score/RL$goals)
hist(RL$score/RL$demos.taken)
hist(RL$demos.inflicted)
hist(RL$avg.distance.to.ball.no.possession)
hist(RL$avg.distance.to.ball)
hist(RL$time.defensive.third)
hist(RL$time.defensive.third)/60
hist(RL$time.defensive.third/60)
sd(RL$time.defensive.third/60)
max(RL$time.defensive.third/60)
cor(RL$time.defensive.third, RL$amount.collected.big.pads)
cor(RL$time.defensive.third, RL$map)
cor(RL$time.defensive.third, as.factor(RL$map))
cor(RL$time.defensive.third, RL$result
)
cor(RL$time.defensive.third, RL$demos.taken)
cor(RL$time.defensive.third, RL$avg.distance.to.ball.no.possession)
cor(RL$time.defensive.third, RL$bpm)
cor(RL$time.defensive.third, RL$goals)
cor(RL$time.defensive.third, RL$assists)
cor(RL$time.defensive.third, RL$shots.conceded)
cor(RL$time.defensive.third, RL$goals.conceded.while.last.defender)
cor(RL$time.defensive.third, RL$avg.boost.amount)
pairs(RL)
str(RL)
hist(RL$bpm)
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey')+
theme_classic2()+
scale_x_continuous(limits=c(min(RL$bpm), max(RL$bpm)), breaks = seq(mean(RL$bpm)-4*sd(RL$bpm),
mean(RL$bpm)+4*sd(RL$bpm),
sd(RL$bpm)))+
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey')+
theme_classic2()+
scale_x_continuous(limits=c(min(RL$bpm), max(RL$bpm)), breaks = seq(mean(RL$bpm)-4*sd(RL$bpm),
mean(RL$bpm)+4*sd(RL$bpm),
sd(RL$bpm)))+
xlab('Bumps per minute')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
k = ceiling(sqrt(dim(RL)[1]))
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey', bins = k)+
theme_classic2()+
scale_x_continuous(limits=c(min(RL$bpm), max(RL$bpm)), breaks = seq(mean(RL$bpm)-4*sd(RL$bpm),
mean(RL$bpm)+4*sd(RL$bpm),
sd(RL$bpm)))+
xlab('Average Bumps per minute')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
k = ceiling(sqrt(dim(RL)[1]))
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey', bins = k)+
theme_classic2()+
scale_x_continuous(limits=round(c(min(RL$bpm), max(RL$bpm)),2),
breaks = seq(round(mean(RL$bpm)-4*sd(RL$bpm),2),
round(mean(RL$bpm)+4*sd(RL$bpm),2),
round(sd(RL$bpm), 2)))+
xlab('Average bumps per match')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
k = ceiling(sqrt(dim(RL)[1]))
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey', bins = k)+
theme_classic2()+
scale_x_continuous(limits=round(c(min(RL$bpm), max(RL$bpm)),1),
breaks = seq(round(mean(RL$bpm)-4*sd(RL$bpm),1),
round(mean(RL$bpm)+4*sd(RL$bpm),1),
round(sd(RL$bpm), 1)))+
xlab('Average bumps per match')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
mean(RL$saves)
mean(RL$bpm)
sd(RL$bpm)
s = 68.8
xbar = 354.8
xbar+s
xbar-2*s
xbar+2*s
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=10, fig.pos = "H")
#knitr::opts_chunk$set(list(echo = FALSE, eval = FALSE))
library(kableExtra)
library(knitr)
library(latex2exp)
library(gridExtra)
library(ggpubr)
library(ggthemes)
library(plyr)
mainpath = 'C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/FALL/'
wmpath = 'C:/Users/Bruin/Desktop/GS Academia/SEM 2/STAT 519/PROJ 1/watermelon/simulated datasets/ wawamelon/WaterMelonMaster.csv'
whiskpath = 'C:/Users/Bruin/Desktop/GS Academia/SEM 2/STAT 519/PROJ 1/Whiskers/SimSealData/whiskerMaster.csv'
whiskers = read.csv(whiskpath)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=10, fig.pos = "H")
#knitr::opts_chunk$set(list(echo = FALSE, eval = FALSE))
library(kableExtra)
library(knitr)
library(latex2exp)
library(gridExtra)
library(ggpubr)
library(ggthemes)
library(plyr)
mainpath = 'C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/FALL/'
wmpath = 'C:/Users/Bruin/Desktop/GS Academia/MS_Stat/SEM 2/STAT 519/PROJ 1/watermelon/simulated datasets/ wawamelon/WaterMelonMaster.csv'
whiskpath = 'C:/Users/Bruin/Desktop/GS Academia/MS_Stat/SEM 2/STAT 519/PROJ 1/Whiskers/SimSealData/whiskerMaster.csv'
datapath = 'C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/FALL/data/'
RL = read.table(paste0(datapath, 'RLData.txt'), sep = ',', header = T)
k = ceiling(sqrt(dim(RL)[1]))
ggplot(data = RL, aes(x = bpm))+geom_histogram(color = 'black', fill = 'lightgrey', bins = k)+
theme_classic2()+
scale_x_continuous(limits=round(c(min(RL$bpm), max(RL$bpm)),1),
breaks = seq(round(mean(RL$bpm)-4*sd(RL$bpm),1),
round(mean(RL$bpm)+4*sd(RL$bpm),1),
round(sd(RL$bpm), 1)))+
xlab('Average bumps per match')+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
whiskers = read.csv(whiskpath)
teach = read.csv(paste0(mainpath, 'Week_2/teacher_salary.csv'))
ga = read.csv(paste0(mainpath, 'Week_2/georgia_student_survey.csv'))
set.seed(323)
sel = c(76,53,40,29,73,5,77,32,45,74,56,24,6,19,37,26,43,34,33,28)#58,49,25,38,1,18,78,48,75,42,8,31,59,80,47,46,67,64,16,27)
FS = subset(whiskers, species.name == 'Harp')[sel,7:8]
FS$num.beads = round(FS$num.beads)
FS[10,]=c(5.08, 3)
ix = sort(FS$total.length, index.return = T)$ix
kable(cbind.data.frame(c(1:20), FS[ix,]), format = 'latex', booktabs = T,
col.names = c("Observation","Whisker Total Length (cm)", "Number of Beads"), digits = 2,
row.names = F, caption = 'Whisker Length data for $n = 20$ Harp Seals')
FS$num.beads = as.factor(FS$num.beads)
bead3 = subset(FS, num.beads == 3)
bead2 = subset(FS, num.beads == 2)
A = ggplot(data=FS, aes(x = total.length, fill = num.beads))+
theme_classic()+
geom_boxplot(outlier.fill = 'red', outlier.color = 'black', alpha = 0.8,
size = 1, outlier.size = 5,
outlier.shape = 21)+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = 'top')+
xlab('Whisker Total Length (cm)')+
guides(fill=guide_legend(title="Number of Beads"))
plot(A)
#ggarrange(A, B, nrow = 2)
max(bead3$num.beads)
max(bead3$total.length)
FS$num.beads = as.factor(FS$num.beads)
bead3 = subset(FS, num.beads == 3)
bead2 = subset(FS, num.beads == 2)
A = ggplot(data=FS, aes(x = total.length, fill = num.beads))+
theme_classic()+
geom_boxplot(outlier.fill = 'red', outlier.color = 'black', alpha = 0.8,
size = 1, outlier.size = 5,
outlier.shape = 21)+
geom_text(aes(x = max(bead3$total.length), y = 0.5), label = '5.08')+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = 'top')+
xlab('Whisker Total Length (cm)')+
guides(fill=guide_legend(title="Number of Beads"))
plot(A)
#ggarrange(A, B, nrow = 2)
FS$num.beads = as.factor(FS$num.beads)
bead3 = subset(FS, num.beads == 3)
bead2 = subset(FS, num.beads == 2)
A = ggplot(data=FS, aes(x = total.length, fill = num.beads))+
theme_classic()+
geom_boxplot(outlier.fill = 'red', outlier.color = 'black', alpha = 0.8,
size = 1, outlier.size = 5,
outlier.shape = 21)+
geom_text(aes(x = max(bead3$total.length), y = 0.4), label = '5.08')+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = 'top')+
xlab('Whisker Total Length (cm)')+
guides(fill=guide_legend(title="Number of Beads"))
plot(A)
#ggarrange(A, B, nrow = 2)
FS$num.beads = as.factor(FS$num.beads)
bead3 = subset(FS, num.beads == 3)
bead2 = subset(FS, num.beads == 2)
A = ggplot(data=FS, aes(x = total.length, fill = num.beads))+
theme_classic()+
geom_boxplot(outlier.fill = 'red', outlier.color = 'black', alpha = 0.8,
size = 1, outlier.size = 5,
outlier.shape = 21)+
geom_text(aes(x = max(bead3$total.length), y = 0.3), label = 'x = 5.08')+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = 'top')+
xlab('Whisker Total Length (cm)')+
guides(fill=guide_legend(title="Number of Beads"))
plot(A)
#ggarrange(A, B, nrow = 2)
FS$num.beads = as.factor(FS$num.beads)
bead3 = subset(FS, num.beads == 3)
bead2 = subset(FS, num.beads == 2)
A = ggplot(data=FS, aes(x = total.length, fill = num.beads))+
theme_classic()+
geom_boxplot(outlier.fill = 'red', outlier.color = 'black', alpha = 0.8,
size = 1, outlier.size = 5,
outlier.shape = 21)+
geom_text(aes(x = max(bead3$total.length), y = 0.25), label = 'x = 5.08')+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = 'top')+
xlab('Whisker Total Length (cm)')+
guides(fill=guide_legend(title="Number of Beads"))
plot(A)
#ggarrange(A, B, nrow = 2)
hist(bead3$total.length)
bead3$total.length
bead2$total.length
hist(bead3$total.length, breaks = 5)
hist(bead3$total.length, breaks = 10)
dim(whiskers)
set.seed(323)
sel = c(76,53,40,29,73,5,77,32,45,74,56,24,6,19,37,26,43,34,33,28)#58,49,25,38,1,18,78,48,75,42,8,31,59,80,47,46,67,64,16,27)
FS = subset(whiskers, species.name == 'Harp')[sel,7:8]
FS$num.beads = round(FS$num.beads)
FS[10,]=c(5.08, 3)
ix = sort(FS$total.length, index.return = T)$ix
kable(cbind.data.frame(c(1:20), FS[ix,]), format = 'html', booktabs = T, escape = F,
col.names = c("Observation","Whisker Total Length (cm)", "Number of Beads"), digits = 2,
row.names = F, caption = 'Whisker Length data for $n = 20$ Harp Seals')
mean(x)
hist(x)
x
x = c(-4.7,-2.5,-2.3,-1.3,-1.3,-1.2,0.0,0.0,1.0,1.8,2.1, 2.3, 2.6, 2.8, 2.8, 2.9, 3.5, 3.6, 3.7, 3.7, 4.3, 4.8, 4.9, 5.2, 5.3, 5.5, 6.0, 6.5, 6.6, 7.1, 7.1, 7.2, 7.4, 7.7, 7.8, 8.1, 8.1, 8.1, 8.5, 8.7, 9.0, 9.0, 10.0, 10.2, 10.2, 11.0, 11.0, 11.1, 11.1, 11.5)
hist(x)
mean(x)
median(x)
5-3*4
mean(x)
sd(x)
x - 3*4
mean(x) - 3*4
mean(x) - 2*4
mean(x) + 2*4
5- 2*4
5- 4
5+ 4
5- 3*4
5+ 3*4
(11.5 - 5)/4
(-4.7 - 5)/4
mean(FS$total.length)
mean(bead3$total.length)
mean(bead2$total.length)
sd(bead3$total.length)
sd(bead2$total.length)
X = FS[ix,]$total.length
estims = rep(0, 6)
boxplot(X, horizontal = TRUE, axes = TRUE, staplewex = 1)
estims[1:5] = as.numeric(round(summary(X)[c(1:3, 5:6)],2))
estims[3]= estims[3]
estims[5]= round(X[length(X)-1],2)
estims[6]= round(max(X),2)
locals = estims
#locals[3] = locals[3]+0.005
locals[1] = locals[1]+0.02
locals[2] = locals[2]-0.01
locals[4] = locals[4]+0.01
locals[6] = locals[6]-0.05
text(x=locals, labels =paste(c("Min", "Q1","Median", "Q3", "Max", "Outlier"),
estims, sep = "="), y=1.25, cex = 1)
text(x=locals[3], labels =paste("IQR", round(estims[4] - estims[2],2), sep = " = "), y=1.3,
cex = 1)
print(paste0('comma separated values = ', paste0(FS[ix,]$total.length, collapse = ',')))
print(paste0('comma separated values = ', paste0(round(FS[ix,]$total.length,2), collapse = ',')))
(423 - 355)/69
355+2*69
355-2*69
(620 - 355)/69
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
