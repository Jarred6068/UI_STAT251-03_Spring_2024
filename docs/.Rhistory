pts = ((30-(x-y))*5)/(30*5)
return(pts)
}
calcg(10,2)
calcg = function(x,y){
pts = ((30-(x-y))*5)
grade = pts/(30*5)
return(list(points = pts, grade = grade))
}
calcg(10,2)
calcg(4,2)
calcg(10.5,2)
calcg(6.5,1)
calcg(9.5,1)
calcg(18,1)
calcg(18,2)
calcg(6,1)
calcg(10,0)
calcg(13,1)
calcg(12,1)
calcg(11,1)
calcg(3,2)
calcg(11,1)
calcg(8.5,2)
calcg(3,1)
calcg(8,1)
calcg(13,1)
calcg(7.5,1)
calcg(3,2)
calcg(5,1)
calcg(11,0)
calcg(7,1)
calcg(12.5,1)
calcg(4,0)
calcg(5,2)
calcg(7.5,2)
calcg(4.5,2)
calcg(4,0)
calcg(12,1)
calcg(1,1)
calcg(12,0)
calcg(17,1)
calcg(9,1)
calcg(8.5,2)
calcg(13.5,2)
calcg(13.5,1)
calcg(3,2)
calcg(7.5,1)
calcg(6,1)
calcg(7,0)
calcg(7,1)
calcg(4.5,2)
calcg(8.5,2)
calcg(3,1)
calcg(12,0)
1684*2
3368 - 1500 - 200- 500
total = 1684*2
rent = 1500
car.pmt = 500
utilities = 100
cell.phone = 200
internet = 100
subscripts = 50
groceries = 500
bills = rent+car.pmt+utilities+cell.phone+internet+subscripts+groceries
total - bills
remaining = total - bills
26000*1121
(26000*1121)-13200000
(26000*1121)-13200000-5000000
(38000*1121)-13200000-5000000
library(ggubr)
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/MASTER_results.csv')
longform = cbind.data.frame(metric = as.factor(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1]))),
network = as.factor(rep(tab$Network_type, 3)),
input_graph = as.factor(rep(tab$input_graph, 3)),
gamma = as.factor(rep(tab$Gamma, 3)),
resolution_top = as.factor(rep(tab$Resolution_top, 3)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 3)),
Top.stats = c(tab$Top_homogeneity, tab$Top_completeness, tab$Top_NMI),
Mid.stats = c(tab$Middle_homogeneity, tab$Middle_Completeness, tab$Middle_NMI),
Louvain.top = c(tab$Louvain_homogenity_top,
tab$Louvain_completeness_top,
tab$Louvain_NMI_top),
Louvain.middle = c(tab$Louvain_homogenity_middle,
tab$Louvain_completeness_middle,
tab$Louvain_NMI_middle))
longform2 = cbind.data.frame(method = as.factor(c(rep('HCD', dim(longform)[1]),
rep('Louvain', dim(longform)[1]))),
metric = as.factor(rep(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1])), 2)),
network = as.factor(rep(tab$Network_type, 6)),
input_graph = as.factor(rep(tab$input_graph, 6)),
gamma = as.factor(rep(tab$Gamma, 6)),
resolution_top = as.factor(rep(tab$Resolution_top, 6)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 6)),
stats.top = c(longform$Top.stats, longform$Louvain.top),
stats.mid = c(longform$Mid.stats, longform$Louvain.top))
ggplot(data = longform2, aes(x = method, y = stats.top, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
library(ggubr)
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/MASTER_results.csv')
ggplot(data = longform2, aes(x = method, y = stats.top, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
library(ggpubr)
ggplot(data = longform2, aes(x = method, y = stats.top, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
View(longform2)
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform, aes(x = input_graph, y = Louvain.middle, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform2, aes(x = method, y = stats.top, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Top Layer Performance')+
facet_wrap(~input_graph)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#plotted over gamma parameter
ggplot(data = longform, aes(x = gamma, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform2, aes(x = method, y = stats.mid, fill = metric))+
geom_boxplot()+
xlab('Method')+
ylab('Middle Layer Performance')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#plotted over gamma parameter
ggplot(data = longform, aes(x = gamma, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
11500
11500/10
1142 - 850
1142*2
1142*2- 1700
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/Results_Tables_and_Figures/MASTER_results.csv')
library(ggubr)
ggplot(data = tab, aes(x = Network_type, y = Modularity_top, fill = as.factor(Resolution_top)))+
geom_boxplot()
library(ggubr)
library(ggpubr)
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/Results_Tables_and_Figures/MASTER_results.csv')
ggplot(data = tab, aes(x = Network_type, y = Modularity_top, fill = as.factor(Resolution_top)))+
geom_boxplot()
subtab = subset(tab, Resolution_top == 1)
ggplot(data = subtab, aes(x = True_mod_top, y = Modularity_top))+geom_point()
tab$Resolution_top = as.factor(tab$Resolution_top)
tab$Resolution_middle = as.factor(tab$Resolution_middle)
ggplot(data = tab, aes(x = Network_type, y = Top_homogeneity, fill = Resolution_top))+
geom_boxplot()+
facet_wrap(~Gamma)
tab$Resolution_top
longform = cbind.data.frame(metric = as.factor(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1]))),
network = as.factor(rep(tab$Network_type, 3)),
input_graph = as.factor(rep(tab$input_graph, 3)),
gamma = as.factor(rep(tab$Gamma, 3)),
resolution_top = as.factor(rep(tab$Resolution_top, 3)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 3)),
Top.stats = c(tab$Top_homogeneity, tab$Top_completeness, tab$Top_NMI),
Mid.stats = c(tab$Middle_homogeneity, tab$Middle_Completeness, tab$Middle_NMI),
Louvain.top = c(tab$Louvain_homogenity_top,
tab$Louvain_completeness_top,
tab$Louvain_NMI_top),
Louvain.middle = c(tab$Louvain_homogenity_middle,
tab$Louvain_completeness_middle,
tab$Louvain_NMI_middle))
#plotted over gamma parameter
ggplot(data = longform, aes(x = gamma, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = gamma, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Weight Applied to Reconstruction Loss')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
#plotted over resolution parameter
ggplot(data = longform, aes(x = resolution_top, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = resolution_middle, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
#Louvain Perfomance
ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Louvain Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggplot(data = longform, aes(x = input_graph, y = Louvain.middle, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Louvain Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggarrange(A, A2, common.legend = T)
#Louvain Perfomance
A = ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
B = ggplot(data = longform, aes(x = input_graph, y = Louvain.middle, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
#HCD Perfomance
A2 = ggplot(data = longform, aes(x = input_graph, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
B2 = ggplot(data = longform, aes(x = input_graph, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggarrange(A, A2, common.legend = T)
ggplot(data = longform, aes(x = input_graph, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
lg = subset(longform, TOAL = 'False')
lg
longform2 = cbind.data.frame(method = as.factor(c(rep('HCD', dim(longform)[1]),
rep('Louvain', dim(longform)[1]))),
metric = as.factor(rep(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1])), 2)),
network = as.factor(rep(tab$Network_type, 6)),
input_graph = as.factor(rep(tab$input_graph, 6)),
gamma = as.factor(rep(tab$Gamma, 6)),
resolution_top = as.factor(rep(tab$Resolution_top, 6)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 6)),
stats.top = c(longform$Top.stats, longform$Louvain.top),
stats.mid = c(longform$Mid.stats, longform$Louvain.top))
#plotted over resolution parameter
ggplot(data = longform, aes(x = resolution_top, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
ggplot(data = longform, aes(x = resolution_middle, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top')
paste0(round(rnorm(10),1), ',')
paste0(round(rnorm(10),1), collapse = ',')
paste0(sort(round(rnorm(10),1), decreasing = T), collapse = ',')
paste0(sort(round(rnorm(10),1), decreasing = F), collapse = ',')
paste0(sort(round(rnorm(10),2), decreasing = F), collapse = ',')
1.34-(-1.54)
-1.5+3
1.34 - (-1.54)
3/4
-1.5+-.75
-1.5+.75
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggthemes)
library(ggpubr)
set.seed(123)
Bins = c('$-1.5 < X \\leq -0.75$', '$-0.75 < X \\leq 0$', '$0 < X \\leq 0.75$', '$0.75 < X \\leq 1.5$')
freq = hist(c(-1.54,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = T)$counts
seq(-1.5, 1.5, 0.75)
1.34 - (-1.49)
set.seed(123)
Bins = c('$-1.5 < X \\leq -0.75$', '$-0.75 < X \\leq 0$', '$0 < X \\leq 0.75$', '$0.75 < X \\leq 1.5$')
freq = hist(c(-1.49,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = T)$counts
rf = freq/sum(freq)
crf = cumsum(rf)
ft = cbind.data.frame(Bins, freq, rf, crf)
kable(ft, format = 'html', col.names = c('X','Frequency', 'Relative Frequency', 'Cumulative Relative Frequency'), digits = 3, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
set.seed(123)
Bins = c('$-1.5 < X \\leq -0.75$', '$-0.75 < X \\leq 0$', '$0 < X \\leq 0.75$', '$0.75 < X \\leq 1.5$')
freq = hist(c(-1.49,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = T, xlab = 'X')$counts
rf = freq/sum(freq)
crf = cumsum(rf)
ft = cbind.data.frame(Bins, freq, rf, crf)
kable(ft, format = 'html', col.names = c('X','Frequency', 'Relative Frequency', 'Cumulative Relative Frequency'), digits = 3, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
set.seed(123)
Bins = c('$-1.5 < X \\leq -0.75$', '$-0.75 < X \\leq 0$', '$0 < X \\leq 0.75$', '$0.75 < X \\leq 1.5$')
freq = hist(c(-1.49,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = T, xlab = 'X', main = 'Histogram of X')$counts
rf = freq/sum(freq)
crf = cumsum(rf)
ft = cbind.data.frame(Bins, freq, rf, crf)
kable(ft, format = 'html', col.names = c('X','Frequency', 'Relative Frequency', 'Cumulative Relative Frequency'), digits = 3, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
set.seed(123)
Bins = c('$-1.5 < X \\leq -0.75$', '$-0.75 < X \\leq 0$', '$0 < X \\leq 0.75$', '$0.75 < X \\leq 1.5$')
freq = hist(c(-1.49,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = F)$counts
rf = freq/sum(freq)
crf = cumsum(rf)
ft = cbind.data.frame(Bins, freq, rf, crf)
kable(ft, format = 'html', col.names = c('X','Frequency', 'Relative Frequency', 'Cumulative Relative Frequency'), digits = 3, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
hist(c(-1.49,-0.65,-0.6,-0.54,-0.45,0.01,0.17,0.27,0.51,1.34),
breaks = seq(-1.5, 1.5, 0.75),
plot = T, xlab = 'X', main = 'Histogram of X')
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
library(ggpubr)
tab = read.csv('C:/Users/Bruin/Documents/GitHub/HGRN_repo/Simulated Hierarchies/Results_Tables_and_Figures/MASTER_results.csv')
ggplot(data = tab, aes(x = Network_type, y = Modularity_top, fill = as.factor(Resolution_top)))+
geom_boxplot()
subtab = subset(tab, Resolution_top == 1)
ggplot(data = subtab, aes(x = True_mod_top, y = Modularity_top))+geom_point()
tab$Resolution_top = as.factor(tab$Resolution_top)
tab$Resolution_middle = as.factor(tab$Resolution_middle)
ggplot(data = tab, aes(x = Network_type, y = Top_homogeneity, fill = Resolution_top))+
geom_boxplot()+
facet_wrap(~Gamma)
ggplot(data = tab, aes(x = Network_type, y = Top_homogeneity, fill = Resolution_middle))+
geom_boxplot()+
facet_wrap(~Gamma)
longform = cbind.data.frame(metric = as.factor(c(rep('homogeneity', dim(tab)[1]),
rep('completeness', dim(tab)[1]),
rep('NMI', dim(tab)[1]))),
network = as.factor(rep(tab$Network_type, 3)),
input_graph = as.factor(rep(tab$input_graph, 3)),
gamma = as.factor(rep(tab$Gamma, 3)),
resolution_top = as.factor(rep(tab$Resolution_top, 3)),
resolution_middle = as.factor(rep(tab$Resolution_middle, 3)),
Top.stats = c(tab$Top_homogeneity, tab$Top_completeness, tab$Top_NMI),
Mid.stats = c(tab$Middle_homogeneity, tab$Middle_Completeness, tab$Middle_NMI),
Louvain.top = c(tab$Louvain_homogenity_top,
tab$Louvain_completeness_top,
tab$Louvain_NMI_top),
Louvain.middle = c(tab$Louvain_homogenity_middle,
tab$Louvain_completeness_middle,
tab$Louvain_NMI_middle))
#Louvain Perfomance
A = ggplot(data = longform, aes(x = input_graph, y = Louvain.top, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
B = ggplot(data = longform, aes(x = input_graph, y = Louvain.middle, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
plot(A)
#HCD Perfomance
A2 = ggplot(data = longform, aes(x = input_graph, y = Top.stats, fill = metric))+
geom_boxplot()+
xlab('Input Graph')+
ylab('Performance Top Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
B2 = ggplot(data = longform, aes(x = input_graph, y = Mid.stats, fill = metric))+
geom_boxplot()+
xlab('Resolution Value')+
ylab('Performance Middle Layer')+
facet_wrap(~network)+
theme_classic2()+
theme(legend.position = 'top', axis.text.x = element_text(angle = 90))
ggarrange(A, A2, common.legend = T)
ggarrange(A, A2, labels = c('Louvain', 'HCD'), ncol = 1, common.legend = T)
ggarrange(B, B2, labels = c('Louvain', 'HCD'), ncol = 1, common.legend = T)
