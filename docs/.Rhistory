#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
ui <- fluidPage(
fileInput("myfileinput", "Please choose a csv File", multiple = FALSE, accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select the first var', ""),
tableOutput('mytable')
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fileInput("myfileinput", "Please choose a csv File", multiple = FALSE, accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select the first var', ""),
tableOutput('mytable')
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fileInput("myfileinput", "Please choose a csv File", multiple = FALSE, accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select the first var', ""),
tableOutput('mytable')
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Make Plots'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
mainPanel(tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$myselectinput,  output$text <- renderPrint({
paste0(input$myselectinput, collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Make Plots'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print"),
mainPanel(tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
paste0(input$myselectinput, collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print"),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
paste0(input$myselectinput, collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
paste0(input$myselectinput, collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(input$myselectinput[idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
browser()
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(input$myselectinput[idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
reactives$mydata
typeof(reactives$mydata)
reactives$mydata
Q
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
browser()
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(input$myselectinput[idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
reactives
reactives$mydata
data = reactives$mydata
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#browser()
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(input$myselectinput[,idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#browser()
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
reactives$mydata
})
observeEvent(input$print,  output$text <- renderPrint({
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(reactives$mydata[,idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel('Convert values to csv text'),
sidebarLayout(
sidebarPanel(width = 4,
fileInput("myfileinput",
"Please choose a csv File",
multiple = FALSE,
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
selectInput('myselectinput','Select variable', ""),
actionButton("print","Print")),
mainPanel("", tableOutput('mytable'),
verbatimTextOutput("text"))
)
)
server <- function(input, output, session) {
#Reactive to store loaded data
reactives <- reactiveValues(
mydata = NULL
)
#Observe file being selected
observeEvent(input$myfileinput, {
#Store loaded data in reactive
reactives$mydata <- read.csv(file = input$myfileinput$datapath)
#browser()
#Update select input
updateSelectInput(session, inputId = 'myselectinput', label = 'Select the first var', choices  = colnames(reactives$mydata))
})
#Data table
output$mytable <- renderTable({
head(reactives$mydata)
})
observeEvent(input$print,  output$text <- renderPrint({
idx = which(colnames(reactives$mydata) == input$myselectinput)
paste0(reactives$mydata[,idx], collapse = ',')
}))
}
shinyApp(ui = ui, server = server)
path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_files_to_text/'
outpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_files_to_text/webfiles/'
shinylive::export(appdir = path, destdir = outpath)
httpuv::runStaticServer("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_files_to_text/webfiles/")
path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_file_to_text/'
outpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_file_to_text/webfiles/'
shinylive::export(appdir = path, destdir = outpath)
httpuv::runStaticServer("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Convert_file_to_text/webfiles/")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(latex2exp)
library(gganimate)
path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/Data/'
cpt = read.csv(file = paste0(path, 'central_park_temps.csv'))
cpt = read.csv(file = paste0(path, 'central_park_temps.csv'))
kable(cpt[,c(1, 14)], col.names = c('Year', 'Mean Annual Temp'), format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
cpt = read.csv(file = paste0(path, 'central_park_temps.csv'))
kable(cpt[141:150,c(1, 14)], col.names = c('Year', 'Mean Annual Temp'), format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
mean(cpt[141:150,c(14)])
sd(cpt[141:150,c(14)])
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
82/150
1.96*sqrt(0.52*0.48/150)
56.02+2.25*(1.13\sqrt(10))
56.02+2.25*(1.13/sqrt(10))
56.02-2.25*(1.13/sqrt(10))
(1.96^2*0.95*0.05)/0.02^2
(1.96^2*0.5*0.5)/0.02^2
