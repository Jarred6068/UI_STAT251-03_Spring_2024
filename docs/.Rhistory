xlab('x')+ylab('density')
col = c('red','forestgreen', 'cyan', 'darkgoldenrod1')
for(i in 1:length(n)){
p = p+stat_function(fun = dt,
args = list(df = n[i]-1),
size = 1.5,
color = col[i])
}
final = p+
scale_color_manual(values = c("orange", "red"))+
scale_shape_manual(name = "Values", values = c(21, 22), labels = c("*0.1", "*0.3")) +
scale_fill_manual(name = "Values", values = c(col[1], col[2]), labels = c("*0.1", "*0.3")) +
scale_size_manual(name = "Averages", values = c(1.5, 1.5), labels = c("Random", "Result")) +
guides(color = FALSE,  # Hides the "color" legend because it has 4 values and we don't want that.
shape = guide_legend(order = 1), # Forces the "Values" legend group to be on top
fill = guide_legend(order = 1),  # Forces the "Values" legend group to be on top
size = guide_legend(order = 2, override.aes = list(linetype = c(1, 12), color = c("orange", "red")))) +
theme(panel.grid.major = element_line(colour = "white", linetype = "dashed", size = 0.2),
panel.background = element_rect(fill = "#555555"),
legend.key = element_rect(fill = "#555555"))
# scale_color_manual(name = 'distribution', values = c('black'='black', 'red'='red', 'forestgreen'='forestgreen','cyan'='cyan', 'darkgoldenrod1' = 'darkgoldenrod1'),
# labels = c(TeX('Standard Normal Dist.'), TeX('$t(1)$'), TeX('$t(5)$'), TeX('$t(10)$'), TeX('$t(30)$')),
# guide = 'legend')+
# theme(legend.position = 'topright')
plot(final)
plot(final)
final = p+
scale_color_manual(values = c("orange", "red"))+
scale_shape_manual(name = "Values", values = c(21, 22), labels = c("*0.1", "*0.3")) +
scale_fill_manual(name = "Values", values = c(col[1], col[2]), labels = c("*0.1", "*0.3")) +
scale_size_manual(name = "Averages", values = c(1.5, 1.5), labels = c("Random", "Result")) +
guides(color = FALSE,  # Hides the "color" legend because it has 4 values and we don't want that.
shape = guide_legend(order = 1), # Forces the "Values" legend group to be on top
fill = guide_legend(order = 1),  # Forces the "Values" legend group to be on top
size = guide_legend(order = 2, override.aes = list(linetype = c(1, 12), color = c("orange", "red")))) +
theme(panel.grid.major = element_line(colour = "white", linetype = "dashed", size = 0.2))
plot(final)
mu = 0
sigma = 1
n = c(2, 5, 10, 30)
sds = sigma/sqrt(n)
p = ggplot()+xlim(-3.5, 3.5)+
stat_function(fun = dnorm,
size = 1.5,
color = 'black')+theme_classic()+
xlab('x')+ylab('density')
col = c('red','forestgreen', 'cyan', 'darkgoldenrod1')
for(i in 1:length(n)){
p = p+stat_function(fun = dt,
args = list(df = n[i]-1),
size = 1.5,
color = col[i])
}
final = p+
scale_color_manual(values = c("orange", "red"))+
scale_shape_manual(name = "Values", values = c(21, 22), labels = c("*0.1", "*0.3")) +
scale_fill_manual(name = "Values", values = c(col[1], col[2]), labels = c("*0.1", "*0.3")) +
scale_size_manual(name = "Averages", values = c(1.5, 1.5), labels = c("Random", "Result")) +
guides(color = guide_legend(order = 1),
shape = guide_legend(order = 1), # Forces the "Values" legend group to be on top
fill = guide_legend(order = 1),  # Forces the "Values" legend group to be on top
size = guide_legend(order = 2, override.aes = list(linetype = c(1, 12), color = c("orange", "red")))) +
theme(panel.grid.major = element_line(colour = "white", linetype = "dashed", size = 0.2))
# scale_color_manual(name = 'distribution', values = c('black'='black', 'red'='red', 'forestgreen'='forestgreen','cyan'='cyan', 'darkgoldenrod1' = 'darkgoldenrod1'),
# labels = c(TeX('Standard Normal Dist.'), TeX('$t(1)$'), TeX('$t(5)$'), TeX('$t(10)$'), TeX('$t(30)$')),
# guide = 'legend')+
# theme(legend.position = 'topright')
plot(final)
final = p+
scale_color_identity(guide = 'legend', labels = lbls)+
theme(legend.position = 'topright')
plot(final)
mu = 0
sigma = 1
n = c(2, 5, 10, 30)
sds = sigma/sqrt(n)
p = ggplot()+xlim(-3.5, 3.5)+
stat_function(fun = dnorm,
size = 1.5,
color = 'black')+theme_classic()+
xlab('x')+ylab('density')
col = c('black','red','forestgreen', 'cyan', 'darkgoldenrod1')
lbls = c(TeX('Standard Normal Dist.'), TeX('$t(1)$'), TeX('$t(5)$'), TeX('$t(10)$'), TeX('$t(30)$'))
for(i in 1:length(n)){
p = p+stat_function(fun = dt,
args = list(df = n[i]-1),
size = 1.5,
color = col[i+1])
}
final = p+
scale_color_identity(guide = 'legend', labels = lbls)+
theme(legend.position = 'topright')
plot(final)
mu = 0
sigma = 1
n = c(2, 5, 10, 30)
sds = sigma/sqrt(n)
p = ggplot()+xlim(-3.5, 3.5)+
stat_function(fun = dnorm,
size = 1.5,
color = 'black')+theme_classic()+
xlab('x')+ylab('density')
col = c('black','red','forestgreen', 'cyan', 'darkgoldenrod1')
lbls = c(TeX('Standard Normal Dist.'), TeX('$t(1)$'), TeX('$t(5)$'), TeX('$t(10)$'), TeX('$t(30)$'))
for(i in 1:length(n)){
p = p+stat_function(fun = dt,
args = list(df = n[i]-1),
size = 1.5,
color = col[i+1])
}
final = p+
scale_color_identity(guide = 'legend', color = col, labels = lbls)+
theme(legend.position = 'topright')
scale_color_identity()
?scale_color_identity()
final = p+
scale_color_identity(guide = 'legend')+
theme(legend.position = 'topright')
plot(final)
final = p+
scale_color_identity(guide = 'legend', labels = lbls)+
theme(legend.position = 'topright')
plot(final)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "gold", "black")
labels = c("df=1", "df=2", "df=5", "df=10", "normal")
plot(x, hx, type="l", lty=1, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,1,1,1), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=1, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "gold", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,1,1,1), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=1, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "gold", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,1,1,1), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "gold", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 2,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,1,1,1), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 2,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,1,1,1), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 3,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,3,3,3), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t-dist with df = 1", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 3,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,3,3,3), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 3,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,3,3,3), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 3,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,3,3,3), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
x = seq(-3, 3, length=1000)
hx = dnorm(x)
degf = c(1, 2, 5, 10)
colors = c("red", "blue", "darkgreen", "darkgoldenrod1", "black")
labels = c("t(1)", "t(2)", "t(5)", "t(10)", "standard normal")
plot(x, hx, type="l", lty=1, xlab="x value", lwd = 3,
ylab="Density", main="Comparison of t Distributions")
#The relevant modification
mapply(function(DoF, W, C) lines(x, dt(x, DoF), lwd=W, col=C), DoF = degf, W = c(3,3,3,3), C = colors[-5])
legend("topleft", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 1), col=colors)
set.seed(123)
mu = 120
sigma = 10
n = 5
z = 1.96
repeats = 100
samples = lapply(c(1:repeats), function(x) rnorm(n, mean = mu, sd = sigma))
means.vec = unlist(lapply(samples, function(x) mean(x)))
se.vec = unlist(lapply(samples, function(x) sd(x)/sqrt(n)))
xpos = 1:100
ymin = means.vec-2*se.vec
ymax = means.vec+2*se.vec
ix = which(mu < ymin | mu > ymax)
ind = rep('True', 100)
ind[ix] = 'False'
df = cbind.data.frame(`$\\bar{x}$` = means.vec,
`$SE$` = se.vec,
xpos = xpos,
`Covers Parameter` = ind)
ggplot(data = df, aes(x = xpos, y = `$\\bar{x}$`, color = `Covers Parameter`))+
geom_hline(yintercept = mu, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point()+
geom_errorbar(aes(ymin = ymin, ymax = ymax), height = 0.01, linewidth = 1)+
geom_text(aes(x = 0, y = mu+0.1), label = TeX('$\\mu$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\bar{x}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
ggplot(data = df, aes(x = xpos, y = `$\\bar{x}$`, color = `Covers Parameter`))+
geom_hline(yintercept = mu, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point()+
geom_errorbar(aes(ymin = ymin, ymax = ymax), height = 0.01, linewidth = 1)+
geom_text(aes(x = -0.1, y = mu+0.1), label = TeX('$\\mu$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\bar{x}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
set.seed(123)
mu = 120
sigma = 10
n = 5
z = 1.96
repeats = 100
samples = lapply(c(1:repeats), function(x) rnorm(n, mean = mu, sd = sigma))
means.vec = unlist(lapply(samples, function(x) mean(x)))
se.vec = unlist(lapply(samples, function(x) sd(x)/sqrt(n)))
xpos = 1:100
ymin = means.vec-2*se.vec
ymax = means.vec+2*se.vec
ix = which(mu < ymin | mu > ymax)
ind = rep('True', 100)
ind[ix] = 'False'
df = cbind.data.frame(`$\\bar{x}$` = means.vec,
`$SE$` = se.vec,
xpos = xpos,
`Covers Parameter` = ind)
ggplot(data = df, aes(x = xpos, y = `$\\bar{x}$`, color = `Covers Parameter`))+
geom_hline(yintercept = mu, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(size = 3)+
geom_errorbar(aes(ymin = ymin, ymax = ymax), height = 0.01, linewidth = 1)+
geom_text(aes(x = -0.1, y = mu+0.1), label = TeX('$\\mu$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\bar{x}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
qt(0.95, c(1:30))
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame('$DF$' = DF, qt(1-0.5/2, DF), qt(1-0.1/2, DF), qt(1-0.05/2, DF), qt(1-0.01/2, DF),
qt(1 - 0.005/2, DF), qt(1 - 0.001/2, DF))
head(Probs)
head(probs)
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame('$DF$' = DF, qt(1-0.5/2, DF), qt(1-0.3/2, DF), qt(1-0.2/2, DF), qt(1-0.1/2, DF), qt(1-0.05/2, DF), qt(1-0.01/2, DF),
qt(1 - 0.005/2, DF), qt(1 - 0.001/2, DF))
df = rbind.data.frame(c(0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',qt(1-0.5/2, DF)), c('',qt(1-0.3/2, DF)),
c('',qt(1-0.2/2, DF)), c('',qt(1-0.1/2, DF)),
c('',qt(1-0.05/2, DF)), c('',qt(1-0.01/2, DF)),
c('',qt(1 - 0.005/2, DF)), c('',qt(1 - 0.001/2, DF)))
df = rbind.data.frame(c(0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',qt(1-0.5/2, DF)), c('',qt(1-0.3/2, DF)),
c('',qt(1-0.2/2, DF)), c('',qt(1-0.1/2, DF)),
c('',qt(1-0.05/2, DF)), c('',qt(1-0.01/2, DF)),
c('',qt(1 - 0.005/2, DF)), c('',qt(1 - 0.001/2, DF)))
df = rbind.data.frame(c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c(0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = c('Upper tail', 'two tail', rep('', dim(probs)[1])), booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',qt(1-0.5/2, DF)), c('',qt(1-0.3/2, DF)),
c('',qt(1-0.2/2, DF)), c('',qt(1-0.1/2, DF)),
c('',qt(1-0.05/2, DF)), c('',qt(1-0.01/2, DF)),
c('',qt(1 - 0.005/2, DF)), c('',qt(1 - 0.001/2, DF)))
df = rbind.data.frame(c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c(0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = c('Upper tail', 'two tail', rep('', dim(probs)[1]+1)), booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',qt(1-0.5/2, DF)), c('',qt(1-0.3/2, DF)),
c('',qt(1-0.2/2, DF)), c('',qt(1-0.1/2, DF)),
c('',qt(1-0.05/2, DF)), c('',qt(1-0.01/2, DF)),
c('',qt(1 - 0.005/2, DF)), c('',qt(1 - 0.001/2, DF)))
df = rbind.data.frame(c('Two tail 0.5', 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail 0.25', 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',qt(1-0.5/2, DF)), c('',qt(1-0.3/2, DF)),
c('',qt(1-0.2/2, DF)), c('',qt(1-0.1/2, DF)),
c('',qt(1-0.05/2, DF)), c('',qt(1-0.01/2, DF)),
c('',qt(1 - 0.005/2, DF)), c('',qt(1 - 0.001/2, DF)))
df = rbind.data.frame(c('Two tail 0.5', 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('','Upper tail 0.25', 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.3/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.1/2, DF),3)),
c('',round(qt(1-0.05/2, DF),3)), c('',round(qt(1-0.01/2, DF),3)),
c('',round(qt(1 - 0.005/2, DF),3)), c('',round(qt(1 - 0.001/2, DF),3)))
df = rbind.data.frame(c('Two tail 0.5', 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('','Upper tail 0.25', 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = cbind.data.frame(c('$DF$', DF), c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.3/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.1/2, DF),3)),
c('',round(qt(1-0.05/2, DF),3)), c('',round(qt(1-0.01/2, DF),3)),
c('',round(qt(1 - 0.005/2, DF),3)), c('',round(qt(1 - 0.001/2, DF),3)))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.3/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.1/2, DF),3)),
c('',round(qt(1-0.05/2, DF),3)), c('',round(qt(1-0.01/2, DF),3)),
c('',round(qt(1 - 0.005/2, DF),3)), c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.3/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.1/2, DF),3)),
c('',round(qt(1-0.05/2, DF),3)), c('',round(qt(1-0.01/2, DF),3)),
c('',round(qt(1 - 0.005/2, DF),3)), c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$'100*(1-c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.3/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.1/2, DF),3)),
c('',round(qt(1-0.05/2, DF),3)), c('',round(qt(1-0.01/2, DF),3)),
c('',round(qt(1 - 0.005/2, DF),3)), c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$',100*(1-c(0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.4/2, DF),3)),
c('',round(qt(1-0.3/2, DF),3)), c('',round(qt(1-0.25/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.15/2, DF),3)),
c('',round(qt(1-0.1/2, DF),3)), c('',round(qt(1-0.05/2, DF),3)),
c('',round(qt(1-0.01/2, DF),3)), c('',round(qt(1 - 0.005/2, DF),3)),
c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$',100*(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.2, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.1, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
0.25/2
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.4/2, DF),3)),
c('',round(qt(1-0.3/2, DF),3)), c('',round(qt(1-0.25/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.15/2, DF),3)),
c('',round(qt(1-0.1/2, DF),3)), c('',round(qt(1-0.05/2, DF),3)),
c('',round(qt(1-0.01/2, DF),3)), c('',round(qt(1 - 0.005/2, DF),3)),
c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$',100*(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.125, 0.1, 0.075, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.4/2, DF),3)),
c('',round(qt(1-0.3/2, DF),3)), c('',round(qt(1-0.25/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.15/2, DF),3)),
c('',round(qt(1-0.1/2, DF),3)), c('',round(qt(1-0.05/2, DF),3)),
c('',round(qt(1-0.01/2, DF),3)), c('',round(qt(1 - 0.005/2, DF),3)),
c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$',100*(1-c(0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
df = rbind.data.frame(c('Two tail', 0.5, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.15, 0.125, 0.1, 0.075, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
probs
DF = c(1:30, 40, 50, 100)
probs = rbind.data.frame(cbind.data.frame(c('$DF$', DF),
c('',round(qt(1-0.5/2, DF), 3)), c('',round(qt(1-0.4/2, DF),3)),
c('',round(qt(1-0.3/2, DF),3)), c('',round(qt(1-0.25/2, DF),3)),
c('',round(qt(1-0.2/2, DF), 3)), c('',round(qt(1-0.15/2, DF),3)),
c('',round(qt(1-0.1/2, DF),3)), c('',round(qt(1-0.05/2, DF),3)),
c('',round(qt(1-0.01/2, DF),3)), c('',round(qt(1 - 0.005/2, DF),3)),
c('',round(qt(1 - 0.001/2, DF),3))),
c('Z-score', round(qnorm(1-c(0.5, 0.4, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)/2),3)),
c('Confidence Level:',
paste0('$',100*(1-c(0.5, 0.4, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001)), '\\%$')))
df = rbind.data.frame(c('Two tail', 0.5, 0.4, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.01, 0.005, 0.001), probs)
kable(df, format = 'html', digits = 2, col.names = c('Upper tail', 0.25, 0.2, 0.15, 0.125, 0.1, 0.075, 0.05, 0.025, 0.005, 0.0025, 0.0005),
row.names = F, booktabs = F, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
alpha = c(0.1, 0.15, 0.05, 0.01, 0.2)
n = c(3, 5, 10, 14, 22)
df = cbind.data.frame(`Confidence Level` = paste0('$', 100*(1-alpha), '\\%$'),
`Sample size` = paste0('$n = ', n, '$'),
`$\\alpha$` = alpha,
`critical value: $t$` = round(qt(1-alpha/2, df = n)))
kable(df, format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
alpha = c(0.1, 0.15, 0.05, 0.01, 0.2)
n = c(3, 5, 10, 14, 22)
df = cbind.data.frame(`Confidence Level` = paste0('$', 100*(1-alpha), '\\%$'),
`Sample size` = paste0('$n = ', n, '$'),
`$\\alpha$` = alpha,
`critical value: $t$` = round(qt(1-alpha/2, df = n), 3))
kable(df, format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
alpha = c(0.1, 0.15, 0.05, 0.01, 0.2)
n = c(3, 5, 10, 14, 22)
df = cbind.data.frame(`Confidence Level` = paste0('$', 100*(1-alpha), '\\%$'),
`Sample size` = paste0('$n = ', n, '$'),
`$\\alpha$` = alpha,
`critical value: $t_{1-\\alpha/2}$` = round(qt(1-alpha/2, df = n), 3))
kable(df, format = 'html', digits = 2, row.names = F, booktabs = T, escape = F)%>%
kable_classic(full_width = F, html_font = "Cambria")%>%kable_styling(bootstrap_options = 'striped')
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/")
#render your sweet site.
rmarkdown::render_site()
