print(paste0('Trans Gene Skew = ', round(rare.skew$trans.skew[i],4),
' : Trans Gene Kurtosis = ', round(rare.skew$trans.kurtosis[i],4)))
newlabs = paste(c('SNP ID', 'Cis Gene', 'Trans Gene'), cn, sep = ': ')
if(get.freq(trio[,1]) == perm.all[13,rare.idx[i]]){
color.codes = c("#0073C2FF","#868686FF","#EFC000FF")
k = ceiling(sqrt(dim(trio)[1]))
trio$`SNP Genotype` = as.factor(trio$`SNP Genotype`)
print(paste0('Plotting trio #', trio.idx[i]))
# A = ggplot(data = as.data.frame(trio), aes(x = `Cis Gene Expression`, y = `Trans Gene Expression`,
#                                        color = `SNP Genotype`, fill = `SNP Genotype`))+
#   geom_point(size = 2, shape = 21, alpha = 0.8, color = 'black')+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   scale_fill_manual(values = color.codes)+
#   scale_color_manual(values = color.codes)+
#   xlab(newlabs[2])+
#   ylab(newlabs[3])+
#   ggtitle(newlabs[1])+
#   theme_classic2()
#
# B = ggplot(data = as.data.frame(trio))+
#   geom_histogram(aes(x = `Cis Gene Expression`),
#                   color = 'black', fill = '#0073C2FF', bins = k)+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   ylab('Frequency')+
#   theme_hc()
#
# C = ggplot(data = as.data.frame(trio))+
#   geom_histogram(aes(x = `Trans Gene Expression`),
#                  color = 'black', fill = '#0073C2FF', bins = k)+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   ylab('Frequency')+
#   theme_hc()
#
# D = ggarrange(B,C, nrow = 1)
# pdf(paste0(sp,'trio_number_', trio.idx[i], '.pdf'), height = 6, width = 10)
#   final = ggarrange(A,D, nrow = 2, ncol = 1, common.legend = T)
#   plot(final)
# dev.off()
}else{
warning('Frequencies did NOT match!!! ... identifying trio ...')
no.match = append(no.match, rare.idx[i])
}
}
common.idx = which(unlist(perm.all[13,])>=0.1)
trio.idx = mrgn.tab$Trio.sub.index[common.idx]
common.skew = cbind.data.frame(case = rep('Minor Allele Freq > 0.1', length(common.idx)),
index = trio.idx,
as.data.frame(matrix(0, nrow = length(common.idx), ncol = 4)))
colnames(common.skew) = c('minor.freq', 'index', 'cis.skew', 'cis.kurtosis', 'trans.skew', 'trans.kurtosis')
for(i in 1:length(common.idx)){
trio = as.data.frame(na.omit(trios.pr.lr.only[, trio.idx.mat[common.idx[i],]]))
cn = colnames(trio)
colnames(trio) = c('SNP Genotype', 'Cis Gene Expression', 'Trans Gene Expression')
common.skew$cis.skew[i] = propagate::skewness(trio[,2])
common.skew$trans.skew[i] = propagate::skewness(trio[,3])
common.skew$cis.kurtosis[i] = propagate::kurtosis(trio[,2])
common.skew$trans.kurtosis[i] = propagate::kurtosis(trio[,3])
print('====================================================================')
print(paste0('Cis Gene Skew = ', round(common.skew$cis.skew[i],4),
' : Cis Gene Kurtosis = ', round(common.skew$cis.kurtosis[i],4)))
print('--------------------------------------------------------------------')
print(paste0('Trans Gene Skew = ', round(common.skew$trans.skew[i],4),
' : Trans Gene Kurtosis = ', round(common.skew$trans.kurtosis[i],4)))
newlabs = paste(c('SNP ID', 'Cis Gene', 'Trans Gene'), cn, sep = ': ')
if(get.freq(trio[,1]) == perm.all[13,common.idx[i]]){
color.codes = c("#0073C2FF","#868686FF","#EFC000FF")
k = ceiling(sqrt(dim(trio)[1]))
trio$`SNP Genotype` = as.factor(trio$`SNP Genotype`)
print(paste0('Plotting trio #', common.idx[i]))
# A = ggplot(data = as.data.frame(trio), aes(x = `Cis Gene Expression`, y = `Trans Gene Expression`,
#                                            color = `SNP Genotype`, fill = `SNP Genotype`))+
#   geom_point(size = 2, shape = 21, alpha = 0.8, color = 'black')+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   scale_fill_manual(values = color.codes)+
#   scale_color_manual(values = color.codes)+
#   xlab(newlabs[2])+
#   ylab(newlabs[3])+
#   ggtitle(newlabs[1])+
#   theme_classic2()
#
# B = ggplot(data = as.data.frame(trio))+
#   geom_histogram(aes(x = `Cis Gene Expression`),
#                  color = 'black', fill = '#0073C2FF', bins = k)+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   ylab('Frequency')+
#   theme_hc()
#
# C = ggplot(data = as.data.frame(trio))+
#   geom_histogram(aes(x = `Trans Gene Expression`),
#                  color = 'black', fill = '#0073C2FF', bins = k)+
#   theme(axis.text = element_text(size = 12),
#         axis.title = element_text(size = 12))+
#   ylab('Frequency')+
#   theme_hc()
#
# D = ggarrange(B,C, nrow = 1)
# pdf(paste0(sp,'common_allele_trios/','trio_number_', trio.idx[i], '.pdf'), height = 6, width = 10)
# final = ggarrange(A,D, nrow = 2, ncol = 1, common.legend = T)
# plot(final)
# dev.off()
}else{
warning('Frequencies did NOT match!!! ... identifying trio ...')
no.match = append(no.match, common.idx[i])
}
}
cis.skew.all = cbind.data.frame(gene.position = rep('Cis', number.of.trios),
rbind.data.frame(common.skew[,1:2], rare.skew[,1:2]))
trans.skew.all = cbind.data.frame(gene.position = rep('Trans', number.of.trios),
rbind.data.frame(common.skew[, c(1,4)], rare.skew[,c(1,4)]))
colnames(cis.skew.all) = colnames(trans.skew.all) = c('Gene Type','Variant Frequency', 'skew.stat')
final.skew = rbind(cis.skew.all, trans.skew.all)
color.codes = c("#0073C2FF","#EFC000FF")
A = ggplot(data = final.skew, aes(x = skew.stat,# y = after_stat(density),
fill = `Gene Type`, color = `Gene Type`))+
geom_histogram(color = 'black', bins = 20, alpha = 0.8, position = 'stack')+
#geom_density(alpha = 0, linewidth = 0.9)+
scale_fill_manual(values = color.codes)+
scale_color_manual(values = color.codes)+
facet_wrap(~`Variant Frequency`)+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 12))+
xlab('Sample Skewness')+
ylab('Density')+
theme_hc()
plot(A)
cis.kurt.all = cbind.data.frame(gene.position = rep('Cis', number.of.trios),
rbind.data.frame(common.skew[,c(1,3)], rare.skew[,c(1,3)]))
trans.kurt.all = cbind.data.frame(gene.position = rep('Trans', number.of.trios),
rbind.data.frame(common.skew[, c(1,5)], rare.skew[,c(1,5)]))
colnames(cis.kurt.all) = colnames(trans.kurt.all) = c('Gene Type','Variant Frequency', 'kurtosis')
final.kurtosis = rbind(cis.kurt.all, trans.kurt.all)
summary_hp_tests = cbind.data.frame(`Gene` = c('Cis', 'Trans', 'Cis', 'Trans'),
`Summary Statistic` = c('Sample Skewness', 'Sample Skewness',
'Sample Excess Kurtosis', 'Sample Excess Kurtosis'),
Test = rep('Minor Allele < 0.1 (Rare) - Minor Allele > 0.1 (Common)', 4),
`Mean Rare` = c(mean(subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat),
mean(subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat),
mean(subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis),
mean(subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis)),
`SD Rare` = c(sd(subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat),
sd(subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat),
sd(subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis),
sd(subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis)),
`Mean Common` = c(mean(subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat),
mean(subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat),
mean(subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis),
mean(subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis)),
`SD Common` = c(sd(subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat),
sd(subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat),
sd(subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis),
sd(subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis)),
`Wilcoxen Sum-Rank Statistic` = c(wilcox.test(x = subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat,
y = subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat,
alternative = 'two.sided')$statistic,
wilcox.test(x = subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat,
y = subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat,
alternative = 'two.sided')$statistic,
wilcox.test(x = subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis,
y = subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis,
alternative = 'two.sided')$statistic,
wilcox.test(x = subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis,
y = subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis,
alternative = 'two.sided')$statistic),
`Pvalue` = c(wilcox.test(x = subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat,
y = subset(cis.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat,
alternative = 'two.sided')$p.value,
wilcox.test(x = subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$skew.stat,
y = subset(trans.skew.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$skew.stat,
alternative = 'two.sided')$p.value,
wilcox.test(x = subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis,
y = subset(cis.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis,
alternative = 'two.sided')$p.value,
wilcox.test(x = subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq < 0.1')$kurtosis,
y = subset(trans.kurt.all, `Variant Frequency` == 'Minor Allele Freq > 0.1')$kurtosis,
alternative = 'two.sided')$p.value))
summary_hp_tests$`Bonferroni Corrected Pvalue` = p.adjust(summary_hp_tests$Pvalue, method = 'bonferroni')
A2 = ggplot(data = final.kurtosis, aes(x = kurtosis,# y = after_stat(density),
fill = `Gene Type`, color = `Gene Type`))+
geom_histogram(color = 'black', bins = 20, alpha = 0.8, position = 'stack')+
#geom_density(alpha = 0, linewidth = 0.9)+
scale_fill_manual(values = color.codes)+
scale_color_manual(values = color.codes)+
facet_wrap(~`Variant Frequency`)+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 12))+
xlab('Sample (Excess) Kurtosis')+
ylab('Density')+
theme_hc()
plot(A2)
pdf(paste0(sp, 'SF8_Trio_Skew_Stat_Distribtuions.pdf'), height = 8, width = 10)
plot(ggarrange(A, A2, nrow = 2, common.legend = T))
dev.off()
write.csv(summary_hp_tests, file = paste0(sp2, 'S12_sign_rank_tests_skewness_in_trans_genes.csv'))
final.skew.mat = rbind.data.frame(common.skew, rare.skew)
head(final.skew.mat)
model.change.idx
mrgn.tab[model.change.idx,]$Trio.sub.index
which(final.skew.mat$index == model.change.idx)
match(final.skew.mat$index == model.change.idx)
match(model.change.idx, final.skew.mat$index)
final.skew.mat[match(model.change.idx, final.skew.mat$index),]
final.skew.mat[match(model.change.idx, final.skew.mat$index),]$cis.skew
mean(final.skew.mat[match(model.change.idx, final.skew.mat$index),]$cis.skew)
mean(final.skew.mat[match(model.change.idx, final.skew.mat$index),]$trans.skew)
sd(final.skew.mat[match(model.change.idx, final.skew.mat$index),]$cis.skew)
sd(final.skew.mat[match(model.change.idx, final.skew.mat$index),]$trans.skew)
mean(final.skew.mat[-match(model.change.idx, final.skew.mat$index),]$cis.skew)
mean(final.skew.mat[-match(model.change.idx, final.skew.mat$index),]$trans.skew)
sd(final.skew.mat[-match(model.change.idx, final.skew.mat$index),]$trans.skew)
sd(final.skew.mat[-match(model.change.idx, final.skew.mat$index),]$xia.skew)
sd(final.skew.mat[-match(model.change.idx, final.skew.mat$index),]$cis.skew)
data = as.factor(sample(c('H','T'), n))
estimates = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
data = as.factor(sample(c('H','T'), n))
data = as.factor(sample(c('H','T'), n, replace = T))
summary(as.factor(data))
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), height = 0.01, linewidth = 1)+
geom_text(aes(x = 0, y = p+0.1), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
library(ggplot2)
library(ggpubr)
library(latex2exp)
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), height = 0.01, linewidth = 1)+
geom_text(aes(x = 0, y = p+0.1), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
library(ggplot2)
library(ggpubr)
library(latex2exp)
set.seed(222)
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0, y = p+0.1), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
library(ggplot2)
library(ggpubr)
library(latex2exp)
set.seed(222)
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0, y = p+0.01), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0.5, y = p+0.01), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(1, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
library(ggplot2)
library(ggpubr)
library(latex2exp)
set.seed(222)
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0.5, y = p+0.01), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(0.5, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
library(ggplot2)
library(ggpubr)
library(latex2exp)
set.seed(222)
phat = NULL
SE = NULL
n = 100
alpha = 0.05
standard.score = qnorm(1-alpha/2)
covers.param = rep('True', 100)
for(i in 1:100){
data = as.factor(sample(c('H','T'), n, replace = T))
phat[i] = summary(data)[1]/n
}
SE = sqrt(phat*(1-phat)/n)
LB = phat - standard.score*SE
UP = phat + standard.score*SE
p = 0.5
covers.param[which(LB > 0.5 | UP < 0.5)] = 'False'
df = cbind.data.frame(x = c(1:100),
estimate = phat,
UB = UP,
LB = LB,
`Confidence Interval Covers Parameter` = covers.param)
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0.5, y = p+0.01), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(0, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
ggplot(df, aes(x = x, y = estimate, color = `Confidence Interval Covers Parameter`,
fill = `Confidence Interval Covers Parameter`))+
geom_hline(yintercept = p, linetype = 'dashed', linewidth = 2, color = 'black')+
geom_point(shape = 19)+
geom_errorbar(aes(ymin = LB, ymax = UP), linewidth = 1)+
geom_text(aes(x = 0, y = p+0.01), label = TeX('$p$'), size = 6, color = 'black')+
theme_classic2()+
scale_x_continuous(breaks = seq(0, 100, 5))+
xlab('Sample number')+
ylab(TeX('$\\hat{p}$'))+
theme(legend.position = 'top',
legend.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
0.619-0.012
0.619+0.012
0.619+1.96*0.012
0.619-1.96*0.012
0.619-1.96*sqrt(0.012*(1-0.012))
0.619+1.96*sqrt(0.012*(1-0.012))
(1.96^2*(0.619*(1-0.619)))/0.03^2
(1.96^2*(0.5*(1-0.5)))/0.03^2
qnorm(1-0.01/2)
sqrt(0.1*(1-0.1)/100)
0.1*(1-0.1)/100
sqrt(0.1*(1-0.1)/100)
sqrt(0.1*(1-0.9)/100)
sqrt(0.1*(1-0.9)/50)
sqrt(0.1*(1-0.1)/50)
qt(1-0.05/2, 25)
qt(1-0.05/2, 26)
qt(1-0.05/2, 6)
qt(1-0.05/2, 5)
qt(1-0.01/2, 5)
qt(1-0.05, 5)
qt(1-0.05, 6)
s = 14.8/sqrt(6)
s
14.8^2
sqrt(219/6)
219/sqrt(6)
sqrt(219)/sqrt(6)
sqrt(219)/6
219/6
97.709 - 98.102
2*0.0027
qt(1-0.01/2, 18)
qt(1-0.05/2, 5)
231 - 88\
231 - 88
