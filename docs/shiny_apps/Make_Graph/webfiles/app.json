[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\nlibrary(shiny)\r\nlibrary(ggpubr)\r\nlibrary(ggthemes)\r\n\r\nconvert.keystroke = function(keystroke_input){\r\n  indata = strsplit(keystroke_input, ',')[[1]]\r\n  if(sum(suppressWarnings(is.na(as.numeric(indata))))>0){\r\n    converted = as.character(indata)\r\n    values = unique(converted)\r\n    counts = summary(as.factor(converted))\r\n    input = as.factor(converted)\r\n  }else{\r\n    converted = as.numeric(indata)\r\n    if(sum(converted%%1)>0){\r\n      h = hist(converted, plot = F)\r\n      values = h$breaks[-1]\r\n      counts = h$counts\r\n    }else{\r\n      values = unique(converted)\r\n      counts = summary(as.factor(converted))\r\n    }\r\n    input = converted\r\n  }\r\n  ft = cbind.data.frame(X = values, frequency = counts)\r\n  return(list(ft = ft, data = input))\r\n}\r\n\r\n\r\n\r\ncalc.binwidth = function(method, data){\r\n  n = length(data)\r\n  if(method == 'simple'){\r\n    k = round(sqrt(n))\r\n    w = (max(data) - min(data))/k\r\n  }else if(method == 'sturges'){\r\n    k = round(log2(n))+1\r\n    w = (max(data) - min(data))/k\r\n  }else if(method == 'rice'){\r\n    k = round(2*(n^(1/3)))\r\n    w = (max(data) - min(data))/k\r\n  }else{\r\n    k = NULL\r\n    w = NULL\r\n  }\r\n  \r\n  if(is.null(w)){\r\n    mes = ''\r\n  }else{\r\n    mes = paste0(k, \" bins using method \", method)\r\n  }\r\n  \r\n  return(list(mes, k, w))\r\n}\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  titlePanel('Make Plots'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 textInput(inputId = \"keystroke_input\", \r\n                           label = \"Enter Comma Separated Values (No spaces!)\", \r\n                           value = \"1,2,3, ... or cat, dog, dog, ...\"),\r\n\r\n                 selectInput(inputId = \"plotting\",\r\n                             label = \"Select plot options\",\r\n                             choices = c(\"standard\", \"custom\"),\r\n                             selected = 'standard'),\r\n                \r\n                 selectInput(inputId = \"graph_option\",\r\n                             label = \"Select graph\",\r\n                             choices = c('Histogram','Dotplot', \r\n                                         'Stem plot', 'Boxplot',\r\n                                         'Barplot', 'Pie chart'),\r\n                             selected = \"Histogram\"),\r\n                 \r\n                 conditionalPanel(condition = \"input.plotting == 'custom'\",\r\n                                  selectInput(inputId = \"bin\",\r\n                                              label = \"bin method (histogram only)\",\r\n                                              choices = c('automatic', 'simple', 'sturges', 'rice'),\r\n                                              selected = \"automatic\"),\r\n                                  selectInput(inputId = \"theme\",\r\n                                              label = \"Select plot theme\",\r\n                                              choices = c('classic', 'HC', 'BW'),\r\n                                              selected = \"classic\"),\r\n                                  textInput(inputId = \"xlabel_keystroke\", \r\n                                            label = \"x-axis label\", \r\n                                            value = \"X\"),\r\n                                  textInput(inputId = \"ylabel_keystroke\", \r\n                                            label = \"y-axis label\", \r\n                                            value = \"Y\"),\r\n                                  textInput(inputId = \"title_keystroke\", \r\n                                            label = \"plot title\", \r\n                                            value = NULL),\r\n                                  textInput(inputId = \"fill\", \r\n                                            label = \"plot fill\", \r\n                                            value = 'lightblue'),\r\n                                  textInput(inputId = \"dotsize\", \r\n                                            label = \"Dot size (dot plot only)\", \r\n                                            value = '1')),\r\n                 actionButton(\"Plot\",\"Plot data\")\r\n                 \r\n                 \r\n    ),\r\n    mainPanel(\"\",\r\n              plotOutput(\"plot\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output){\r\n  \r\n  observeEvent(input$Plot,  output$plot <- renderPlot({\r\n    \r\n    if(is.null(input$title_keystroke)){\r\n      plot_title = paste(input$graph_option, ' of ', input$xlabel_keystroke)\r\n    }else{\r\n      plot_title = input$title_keystroke\r\n    }\r\n    #browser()\r\n    out = convert.keystroke(input$keystroke_input)\r\n    if(input$graph_option == 'Histogram'){\r\n      pt = 'ggplot'\r\n      kw = calc.binwidth(method = input$bin,\r\n                         data = out$data)\r\n      \r\n      A = ggplot()+\r\n        geom_histogram(aes(x = out$data), \r\n                       color = 'black', \r\n                       fill = input$fill,\r\n                       binwidth = kw[[3]])+\r\n        theme(axis.text = element_text(size = 12))+\r\n        xlab(input$xlabel_keystroke)+\r\n        ylab(input$ylabel_keystroke)+\r\n        ggtitle(plot_title, subtitle = paste0(kw[[1]]))\r\n        \r\n    }else if(input$graph_option == 'Dotplot'){\r\n      pt = 'ggplot'\r\n      A = ggplot()+geom_dotplot(aes(x = out$data), \r\n                                color = 'black', \r\n                                fill = input$fill,\r\n                                dotsize = as.numeric(input$dotsize))+\r\n        theme(axis.text = element_text(size = 12))+\r\n        xlab(input$xlabel_keystroke)+\r\n        ylab(input$ylabel_keystroke)+\r\n        ggtitle(plot_title)\r\n    }else if(input$graph_option == 'Boxplot'){\r\n      pt = 'bxp'\r\n      mini = min(out$data)\r\n      maxi = max(out$data)\r\n      med = median(out$data)\r\n      avg = mean(out$data)\r\n      q1 = quantile(out$data)[2]\r\n      q3 = quantile(out$data)[4]\r\n      interr = IQR(out$data)\r\n      stdev = sd(out$data)\r\n      estims = c(q1, med, q3)\r\n      boxplot(out$data, horizontal = TRUE, axes = FALSE, staplewex = 1,\r\n              xlab = input$xlabel_keytroke, main = plot_title,\r\n              col = input$fill)\r\n      text(x=estims, \r\n           labels = paste(c(\"Q1\",\"Q2\", \"Q3\"), round(estims,1), \r\n                                 sep = \"=\"), \r\n           y=1.25, cex = 1)\r\n      text(x=c(mini+(stdev/10), maxi - (stdev/10)), \r\n           labels = paste(c(\"Min\", \"Max\"), round(c(mini, maxi),1), \r\n                          sep = \"=\"), \r\n           y=1.30, cex = 1)\r\n      text(x=avg, \r\n           labels = paste(c(\"Mean\"), round(avg,1), \r\n                          sep = \"=\"), \r\n           y=1.35, cex = 1)\r\n      text(x=interr, labels =paste(\"IQR\", round(interr,1), sep = \" = \"), y=1.5, cex = 1.25)\r\n      \r\n    }else if(input$graph_option == 'Stem plot'){\r\n      pt = 'other'\r\n    }else if(input$graph_option == 'Barplot'){\r\n      pt = 'ggplot'\r\n      A = ggplot()+\r\n        geom_bar(aes(x = out$ft$X, y = out$ft$frequency),\r\n                 stat = 'identity',\r\n                 color = 'black',\r\n                 fill = input$fill)+\r\n        theme(axis.text = element_text(size = 12))+\r\n        xlab(input$xlabel_keystroke)+\r\n        ylab(input$ylabel_keystroke)+\r\n        ggtitle(plot_title)\r\n      \r\n    }else if(input$graph_option == 'Pie chart'){\r\n      pt = 'ggplot'\r\n      out$ft$prop = round(out$ft$frequency/sum(out$ft$frequency),2)\r\n      A = ggplot(out$ft, aes(x = \"\", y = prop, fill = X)) +\r\n        geom_col(color = \"black\") +\r\n        geom_text(aes(label = prop), \r\n                  position = position_stack(vjust = 0.5), size = 10) +\r\n        coord_polar(theta = \"y\") +\r\n        theme_void()+\r\n        scale_fill_brewer(palette = 'Reds') +\r\n        theme(legend.text = element_text(size = 12))\r\n    }\r\n    \r\n    if (pt == 'ggplot' && input$graph_option != \"Pie chart\"){\r\n        if(input$theme == 'classic'){\r\n          P = A + theme_classic2()+theme(axis.title = element_text(size = 14))\r\n        }else if (input$theme == 'HC'){\r\n          P = A + theme_hc()+theme(axis.title = element_text(size = 14))\r\n        }else{\r\n          P = A + theme_bw()+theme(axis.title = element_text(size = 14))\r\n        }\r\n      plot(P)\r\n    }else{\r\n      plot(A)  \r\n    }\r\n    \r\n  }))\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Make_Graph/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Make_Graph/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Make_Graph/webfiles/\")\r\n","type":"text"}]
