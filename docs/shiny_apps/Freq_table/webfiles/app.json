[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(ggpubr)\r\nlibrary(knitr)\r\nlibrary(kableExtra)\r\n\r\nconvert.keystroke = function(keystroke_input){\r\n  indata = strsplit(keystroke_input, ',')[[1]]\r\n  if(sum(suppressWarnings(is.na(as.numeric(indata))))>0){\r\n    converted = as.character(indata)\r\n    values = unique(converted)\r\n    counts = summary(as.factor(converted))\r\n  }else{\r\n    converted = as.numeric(indata)\r\n    if(sum(converted%%1)>0){\r\n      h = hist(converted, plot = F)\r\n      values = h$breaks[-1]\r\n      counts = h$counts\r\n    }else{\r\n      values = unique(converted)\r\n      counts = summary(as.factor(converted))\r\n    }\r\n  }\r\n  df = cbind.data.frame(X = values, frequency = counts)\r\n  return(df)\r\n}\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"Make Frequency Tables\"),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 3, \r\n                 #input select\r\n                 # selectInput(inputId = \"output.type\",\r\n                 #             label = \"Select Output\",\r\n                 #             choices = c(\"Table\", \"Bar Plot\"),\r\n                 #             selected = \"Table\"),\r\n                 textInput(inputId = \"keystroke_input\", \r\n                           label = \"Enter Comma Separated Values (No spaces!)\", \r\n                           value = \"1,2,3, ... or cat, dog, dog, ...\"),\r\n                 actionButton(\"Run\",\"Make table\"),\r\n                 actionButton(\"Plot\",\"Make Plot\")\r\n                 ),\r\n    mainPanel(\"main panel\",\r\n              tableOutput(\"table\"),\r\n              plotOutput(\"plot\")\r\n              )\r\n  )\r\n)\r\n\r\n\r\nserver <- function(input, output) {\r\n  \r\n  observeEvent(input$Run,\r\n               output$table <- renderTable({\r\n                 convert.keystroke(input$keystroke_input)\r\n                 }))\r\n  observeEvent(input$Plot,\r\n               output$plot <- renderPlot({\r\n                 ggplot(data = convert.keystroke(input$keystroke_input),\r\n                        aes(x = X, y = frequency))+\r\n                   geom_bar(stat = 'identity', color = 'black', fill = 'grey')+\r\n                   theme_classic2()+\r\n                   xlab('Value')+\r\n                   ylab('Frequnecy')},\r\n                 height=300))\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Freq_table/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Freq_table/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Freq_table/webfiles/\")\r\n\r\n\r\n\r\n","type":"text"}]
