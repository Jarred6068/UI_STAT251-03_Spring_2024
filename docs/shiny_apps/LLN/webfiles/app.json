[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\nlibrary(plotly)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\n\r\n\r\nLLNbern<-function(S,p,n){\r\n  #S should be the max sample\r\n  #p is the probability of the outcome\r\n  #n is the number of trials in the experiment (for bernoulli = 1)\r\n  #NOTE: when n > 1 this function transfers to a binomial exper.\r\n  \r\n  avg=rep(0, S)\r\n  expected = n*p\r\n  positive.outcomes=cumsum(rbinom(S, n, p))\r\n  trials=c(1:S)\r\n  avg=positive.outcomes/trials\r\n  error = avg - expected\r\n  variance = c(0,unlist(lapply(c(2:S), function(x,y)  var(y[1:x]), y = avg)))\r\n  \r\n  \r\n  df = cbind.data.frame(Y = c(avg,variance), LN = c(rep(\"Running Prop.\", S), rep(\"Var. In Prop.\", S)),\r\n                        SS = rep(trials, 2))\r\n  \r\n  \r\n  return(df)\r\n  \r\n}\r\n\r\n\r\naccumulate_by <- function(dat, var) {\r\n  var <- lazyeval::f_eval(var, dat)\r\n  lvls <- plotly:::getLevels(var)\r\n  dats <- lapply(seq_along(lvls), function(x) {\r\n    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\r\n  })\r\n  dplyr::bind_rows(dats)\r\n}\r\n\r\n\r\nhline <- function(y = 0, color = \"black\") {\r\n  list(\r\n    type = \"line\",\r\n    x0 = 0,\r\n    x1 = 1,\r\n    xref = \"paper\",\r\n    y0 = y,\r\n    y1 = y,\r\n    line = list(color = color)\r\n  )\r\n}\r\n\r\n\r\n\r\nmake.animated.plot = function(experiment, xlab = \"The Number of Trials\", ylab =\"Proportion of Flips That Are Heads\",\r\n                              expected.value = NULL, expected.variance = NULL){\r\n  \r\n  \r\n  \r\n  fig <- experiment %>% accumulate_by(~SS)\r\n  #first animation\r\n  fig <- fig %>%\r\n    plot_ly(\r\n      x = ~ SS, \r\n      y = ~ Y,\r\n      frame = ~frame, \r\n      type = 'scatter',\r\n      mode = 'lines', \r\n      split = ~LN,\r\n      line = list(simplyfy = F)\r\n    ) %>% layout(\r\n      xaxis = list(\r\n        title = xlab,\r\n        zeroline = F\r\n      ),\r\n      yaxis = list(\r\n        title = ylab,\r\n        zeroline = F\r\n      ),\r\n      shapes = list(hline(expected.value), hline(expected.variance))\r\n    ) %>% animation_opts(\r\n      frame = 100, \r\n      transition = 0, \r\n      redraw = FALSE\r\n    ) %>% animation_slider(\r\n      hide = T\r\n    )%>% animation_button(\r\n      x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\r\n    )\r\n  \r\n  fig\r\n}\r\n\r\n\r\n# n = 1\r\n# p = 0.5\r\n# S = 500\r\n# \r\n# exp.bernoulli = LLNbern(S, p, n)\r\n# make.animated.plot(exp.bernoulli, expected.value = p, expected.variance = 0)\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Law of Large Numbers\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"resamples\",\r\n                        \"number of resamples:\",\r\n                        min = 1,\r\n                        max = 1000,\r\n                        value = 100),\r\n            sliderInput(\"probability\",\r\n                        \"probability of event:\",\r\n                        min = 0,\r\n                        max = 1,\r\n                        value = 0.5),\r\n            sliderInput(\"trials\",\r\n                        \"number of trials:\",\r\n                        min = 1,\r\n                        max = 100,\r\n                        value = 1)\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n          plotlyOutput(\"distPlot\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n  output$distPlot <- renderPlotly({\r\n    exp.bernoulli = LLNbern(input$resamples, input$probability, input$trials)\r\n    make.animated.plot(exp.bernoulli, expected.value = input$trials*input$probability, \r\n                       expected.variance = (input$probability*(1-input$probability))/input$resamples)\r\n    })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/LLN/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/LLN/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/LLN/webfiles/\")\r\n","type":"text"}]
