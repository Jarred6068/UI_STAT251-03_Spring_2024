[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(latex2exp)\r\nlibrary(gridExtra)\r\nlibrary(ggpubr)\r\nlibrary(GGally)\r\n\r\n\r\nconvert.keystroke = function(input){\r\n  return(strsplit(input$keystroke_input, ',')[[1]])\r\n}\r\n\r\n\r\nget.selected <- function(input, reactives){\r\n  \r\n  idx1 = which(colnames(reactives$mydata) == input$ResponseVar)\r\n  idx2 = match(input$explanatoryVars, colnames(reactives$mydata))\r\n  Y = reactives$mydata[,idx1]\r\n  X = reactives$mydata[,idx2]\r\n  df = cbind.data.frame(Y, X)\r\n  \r\n  if(input$keystroke_input != \"\"){\r\n    quals = convert.keystroke(input)\r\n    convert.idx = na.omit(match(quals, c(input$ResponseVar, input$explanatoryVars)))\r\n    for(i in 1:length(convert.idx)){\r\n      df[,convert.idx[i]] = as.factor(df[,convert.idx[i]])\r\n    }\r\n  }\r\n  colnames(df) = c(input$ResponseVar, input$explanatoryVars)\r\n  \r\n  return(df)\r\n}\r\n\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  \r\n  titlePanel('Linear Regression and ANOVA'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 fileInput(\"myfileinput\", \r\n                           \"Please choose a csv File\", \r\n                           multiple = FALSE, \r\n                           accept = c(\"text/csv\", \"text/comma-separated-values, text/plain\", \".csv\")),\r\n                 \r\n                 selectInput('ResponseVar','Select Response Variable', \"\"),\r\n                 selectInput('explanatoryVars','Select Predictor(s)', \"\",\r\n                             multiple = TRUE),\r\n                 \r\n                 textInput('keystroke_input', \r\n                              'Enter names of selected predictors that should be treated as factors (comma separated)',\r\n                           value = \"\",\r\n                           placeholder = 'variable1, variable2,...'),\r\n                 \r\n                 selectInput(inputId = 'label_points',\r\n                             label = 'Label data points in plot?',\r\n                             choices = c('TRUE','FALSE'),\r\n                             selected = 'TRUE'),\r\n                 conditionalPanel(\"input.label_points == 'TRUE'\",\r\n                                  textInput('labels_cn',\r\n                                               'Give column name for data labels',\r\n                                                value = \"\",\r\n                                            placeholder = 'column_name'),\r\n                                  numericInput('yjust',\r\n                                               'adjust labels (y-axis)',\r\n                                               value = 0),\r\n                                  numericInput('fs',\r\n                                               'select font size',\r\n                                               value = 5,\r\n                                               step = 1)),\r\n                 \r\n                 actionButton(\"fit\",\"Fit Linear Model\"),\r\n                 actionButton(\"plotdata\",\"Plot Linear Model\"),\r\n                 actionButton(\"plotdiagnostics\",\"Plot Diagnositics\"),\r\n                 actionButton(\"anova\",\"Run ANOVA\")\r\n    ),\r\n    mainPanel(plotOutput(\"plot\"), \r\n              plotOutput(\"plotd\"),\r\n              verbatimTextOutput(\"model\"),\r\n              verbatimTextOutput(\"anova\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  \r\n  #Reactive to store loaded data\r\n  reactives <- reactiveValues(\r\n    \r\n    mydata = NULL\r\n    \r\n  )\r\n  \r\n  #Observe file being selected\r\n  observeEvent(input$myfileinput, {\r\n    #browser()\r\n    #Store loaded data in reactive\r\n    reactives$mydata <- read.csv(file = input$myfileinput$datapath)\r\n    #browser()\r\n    #Update select input\r\n    updateSelectInput(session, \r\n                      inputId = 'ResponseVar', \r\n                      label = 'Select the response variable', \r\n                      choices  = colnames(reactives$mydata))\r\n    updateSelectInput(session, \r\n                      inputId = 'explanatoryVars', \r\n                      label = 'Select explanatory variables',\r\n                      choices  = colnames(reactives$mydata))\r\n    \r\n  })\r\n  \r\n  \r\n\r\n  #Data table\r\n  output$mytable <- renderTable({ \r\n    \r\n    head(reactives$mydata)\r\n    \r\n  })\r\n  \r\n  \r\n  \r\n  observeEvent(input$plotdata,  output$plot <- renderPlot({\r\n    \r\n    #browser()\r\n    df = get.selected(input, reactives)\r\n    \r\n    model = lm(formula(df), data = df)\r\n    if(dim(df)[2] > 2){\r\n      \r\n      showNotification(message('generating plot...this may take a few seconds..'),\r\n                       type = 'message')\r\n      ggpairs(data = df, progress = FALSE)\r\n    }else{\r\n      \r\n      \r\n      if(input$keystroke_input != \"\"){\r\n        \r\n        means = unlist(lapply(unique(df[,2]), \r\n                              function(x,y,z) mean(y[z == x]), \r\n                              y = df[,1], z=df[,2]))\r\n        out = ggplot()+\r\n          \r\n          geom_boxplot(aes(x = df[,2], y = df[,1]),\r\n                     color = 'black',fill = 'grey')+\r\n          geom_point(aes(x = levels(df[,2]), y = means),\r\n                     size = 5, color = 'red', alpha = 0.8)+\r\n          theme_bw()+\r\n          xlab(input$explanatoryVars)+\r\n          ylab(input$responseVar)+\r\n          ggtitle('Red points indicate conditional means')\r\n          theme(axis.text = element_text(size =12),\r\n                axis.title = element_text(size = 14),\r\n                legend.position = 'top')\r\n        \r\n      }else{\r\n        out = ggplot()+\r\n          geom_point(aes(x = df[,2], y = df[,1]), \r\n                     shape =21, size = 2.3, \r\n                     color = 'black',fill = 'grey')+\r\n          geom_abline(intercept = model$coefficients[1], slope = model$coefficients[2],\r\n                      linetype = 'dotted', size = 2.5, color = 'red')+\r\n          theme_bw()+\r\n          xlab(input$explanatoryVars)+\r\n          ylab(input$responseVar)+\r\n          theme(axis.text = element_text(size =12),\r\n                axis.title = element_text(size = 14),\r\n                legend.position = 'top')\r\n        \r\n        if(input$label_points == 'TRUE'){\r\n          n = dim(df)[1]\r\n          if(input$labels_cn != \"\"){\r\n            data.labels = reactives$mydata[,which(colnames(reactives$mydata) == input$labels_cn)]\r\n          }else{\r\n            data.labels = c(1:dim(df)[1])\r\n          }\r\n          \r\n          out = out+geom_text(aes(x = df[,2], y = df[,1]-input$yjust), label = data.labels,\r\n                              size = input$fs, color = 'blue')\r\n        }\r\n      }\r\n      \r\n      plot(out)\r\n    }\r\n    \r\n  }))\r\n  \r\n  \r\n  #make diagnostic plots\r\n  observeEvent(input$plotdiagnostics,  output$plotd <- renderPlot({\r\n    \r\n    #browser()\r\n    df = get.selected(input, reactives)\r\n    \r\n    model = lm(formula(df), data = df)\r\n    \r\n    par(mfrow = c(2,2))\r\n    plot(model)\r\n    par(mfrow = c(1,1))\r\n    \r\n  }))\r\n  \r\n  #Compute Regression and report results\r\n  observeEvent(input$fit,  output$model <- renderPrint({\r\n    #browser()\r\n    #browser()\r\n    df = get.selected(input, reactives)\r\n    \r\n    model = lm(formula(df), data = df)\r\n    summary(model)\r\n    }))\r\n  \r\n  #Compute ANOVA and report results\r\n  observeEvent(input$anova,  output$anova <- renderPrint({\r\n    #browser()\r\n    #browser()\r\n    df = get.selected(input, reactives)\r\n    \r\n    model = lm(formula(df), data = df)\r\n    anova(model)\r\n  }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Regression/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Regression/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Regression/webfiles/\")\r\n","type":"text"}]
