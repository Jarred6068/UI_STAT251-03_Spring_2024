[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\nsource('C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/misc/stat251_tools.R')\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(latex2exp)\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n  titlePanel('One Sample Hypothesis Tests'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 selectInput(inputId = \"param\",\r\n                             label = \"Population Parameter\",\r\n                             choices = c(\"mean\", \"proportion\"),\r\n                             selected = 'mean'),\r\n                 \r\n                 selectInput(inputId = \"test\",\r\n                             label = \"Choose inference type:\",\r\n                             choices = c(\"confidence.interval\",\"upper.tail\", \r\n                                         \"lower.tail\", 'two.tailed'),\r\n                             selected = 'upper.tail'),\r\n                 \r\n                 sliderInput(inputId = \"alpha\",\r\n                             label = \"Significance Level:\",\r\n                             min = 0,\r\n                             max = 1,\r\n                             step = 0.01,\r\n                             value = 0.05),\r\n                 \r\n                 numericInput(inputId = \"n\",\r\n                              label = \"Sample Size: \",\r\n                              value = 100),\r\n                 \r\n                 conditionalPanel(condition = \"input.param == 'proportion'\",\r\n                                  numericInput(inputId = \"p0\",\r\n                                              label = \"Set null value H_0: p0 = \",\r\n                                              value = 0.5,\r\n                                              min = 0,\r\n                                              max = 1,\r\n                                              step = 0.01),\r\n                                  numericInput(inputId = \"obs.prop\",\r\n                                               label = \"Observed proportion: \",\r\n                                               min = 0,\r\n                                               max = 1,\r\n                                               step = 0.01,\r\n                                               value = 0.1)),\r\n                                  \r\n                 conditionalPanel(condition = \"input.param == 'mean'\",\r\n                                  numericInput(inputId = \"m0\",\r\n                                               label = \"Set null value H_0: m0 = \",\r\n                                               value = 0),\r\n                                  numericInput(inputId = \"obs.mean\",\r\n                                               label = \"Observed Sample Mean: \",\r\n                                               value = 5),\r\n                                  numericInput(inputId = \"obs.s\",\r\n                                               label = \"Observed Sample Standard Dev.: \",\r\n                                               value = 1)),\r\n                 \r\n                 actionButton(\"run\",\"Run Inference\"),\r\n    ),\r\n    mainPanel(plotOutput(\"plotresult\"), \r\n              verbatimTextOutput(\"summary\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n    observeEvent(input$run,  output$plotresult <- renderPlot({\r\n      if(input$param == 'mean'){\r\n        distrib = 't'\r\n        estimate = input$obs.mean\r\n        standard.score = qt(1-input$alpha/2, input$n - 1)\r\n        SE = (input$obs.s/sqrt(input$n))\r\n        test.stat = (input$obs.mean - input$m0)/SE\r\n        LV = estimate - 4*SE\r\n        UV = estimate + 4*SE\r\n        LB = estimate - standard.score*SE\r\n        UB = estimate + standard.score*SE\r\n      }else{\r\n        distrib = 'z'\r\n        estimate = input$obs.prop\r\n        standard.score = qnorm(1-input$alpha/2)\r\n        SE = sqrt(input$obs.prop*(1-input$obs.prop)/sqrt(input$n))\r\n        test.stat = (input$obs.prop - input$p0)/SE\r\n        LB = max(estimate - standard.score*SE, 0)\r\n        LV = max(estimate - 4*SE, 0)\r\n        UB = min(estimate + standard.score*SE, 1)\r\n        UV = min(estimate + 4*SE, 1)\r\n      }\r\n      \r\n      if(input$test == 'confidence.interval'){\r\n        out = ggplot()+xlim(LV, UV)+\r\n          theme_bw()+\r\n          stat_function(fun = dnorm,\r\n                        args = list(mean = estimate, sd = SE),\r\n                        geom = 'area',\r\n                        fill = 'lightgrey')+\r\n          stat_function(fun = dnorm,\r\n                        args = list(mean = estimate, sd = SE),\r\n                        size = 2)+\r\n          geom_vline(xintercept = LB, linetype = 'dotted', size = 2)+\r\n          geom_vline(xintercept = UB, linetype = 'dotted', size = 2)+\r\n          geom_text(aes(x = estimate, y = dnorm(estimate, mean = estimate, sd = SE)/2),\r\n                     label = paste0(100*(1-input$alpha), '%', ' CI'), size = 8)+\r\n          xlab('Estimate')+\r\n          ylab('Probability Density')+\r\n          theme(axis.text = element_text(size = 12),\r\n                axis.title = element_text(size = 14))\r\n          \r\n      }else{\r\n        out = gen.density.plot(n = input$n, \r\n                               dist = distrib,\r\n                               obs = test.stat,\r\n                               alpha = input$alpha,\r\n                               test = input$test)\r\n      }\r\n      \r\n      plot(out)\r\n      \r\n    }))\r\n    \r\n    observeEvent(input$run,  output$summary <- renderPrint({\r\n      if(input$test == 'confidence.interval'){\r\n        if(input$param == 'mean'){\r\n          one.sample.t.CI(xbar = input$obs.mean,\r\n                          s = input$obs.s,\r\n                          n = input$n,\r\n                          alpha = input$alpha,\r\n                          verbose = T)\r\n          \r\n        }else{\r\n          one.sample.prop.CI(phat = input$obs.prop,\r\n                             n = input$n,\r\n                             alpha = input$alpha,\r\n                             verbose = T)\r\n        }\r\n      }else{\r\n        if(input$param == 'mean'){\r\n          one.sample.t.test(m0 = input$m0, \r\n                            xbar = input$obs.mean,\r\n                            s = input$obs.s,\r\n                            n = input$n,\r\n                            alpha = input$alpha,\r\n                            test = input$test)\r\n          \r\n        }else{\r\n          one.sample.prop.test(p0 = input$p0,\r\n                               phat = input$obs.prop,\r\n                               n = input$n,\r\n                               alpha = input$alpha,\r\n                               test = input$test)\r\n        }\r\n      }\r\n      \r\n    }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/webfiles/\")\r\n","type":"text"}]
