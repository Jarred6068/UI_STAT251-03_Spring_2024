[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(latex2exp)\r\nlibrary(gridExtra)\r\nlibrary(ggpubr)\r\nlibrary(plyr)\r\nlibrary(VennDiagram)\r\n\r\n#this function is a helper function for gen.density.plot\r\nd_limit <- function(x, alpha, test, dist, n) {\r\n  if(dist == 'z'){\r\n    y = dnorm(x)\r\n    q_a = qnorm(1-alpha)\r\n  }else{\r\n    y = dt(x, df = n-1)\r\n    q_a = qt(1-alpha, df = n-1)\r\n  }\r\n  \r\n  \r\n  if(test == 'two.tailed'){\r\n    y[which(x>-q_a & x<q_a)] <- NA  \r\n    return(y)\r\n  }else if (test == 'upper.tail'){\r\n    y[which(x < q_a)] <- NA\r\n    return(y)\r\n  }else{\r\n    y[which(x > -q_a)] <- NA\r\n    return(y)\r\n  }\r\n  \r\n}\r\n\r\n\r\n# this function plots a density curve for the z and t distributions and allows for shading the \r\n# the rejection regions on the plot\r\ngen.density.plot=function(bbox = c(-4,4), n = 10, dist = c('z','t'), alpha = 0.05, obs = 0.5,\r\n                          test = c('two.tailed','lower.tail', 'upper.tail'), shade = TRUE,\r\n                          txt.sz = 5){\r\n  \r\n  p = ggplot(data.frame(x = bbox), aes(x = x))+\r\n    theme_bw()\r\n  if(shade == TRUE){\r\n    p = p + stat_function(fun = d_limit,\r\n                          args = list(alpha = alpha,\r\n                                      test = test,\r\n                                      dist = dist,\r\n                                      n = n), \r\n                          geom = \"area\", \r\n                          fill = \"cyan3\", \r\n                          alpha = 0.4)\r\n  }\r\n  if(dist == 'z'){\r\n    q_a = qnorm(1-alpha)\r\n    d_obs = dnorm(obs)\r\n    d_a = dnorm(q_a)\r\n    func = dnorm\r\n    args = list()\r\n    xlabel = \"z\"\r\n  }else{\r\n    q_a = qt(1-alpha, df = n-1)\r\n    d_obs = dt(obs, df = n-1)\r\n    d_a = dt(q_a, df = n-1)\r\n    func = dt\r\n    args = list(df = n-1)\r\n    xlabel = 't'\r\n  }\r\n  \r\n  if(test == 'two.tailed'){\r\n    xcoords = c(-q_a, q_a, obs)\r\n    ycoords = c(0,0,0)\r\n    xendcoords = c(-q_a, q_a, obs)\r\n    yendcoords = c(d_a, d_a, d_obs)\r\n    if(dist == 'z'){\r\n      lbl1 = c(TeX(\"$z_{\\\\alpha/2}$\"),TeX(\"$z_{1-\\\\alpha/2}$\"),TeX(\"$z_{obs}$\"))\r\n    }else{\r\n      lbl1 = c(TeX(\"$t_{\\\\alpha/2}$\"),TeX(\"$t_{1-\\\\alpha/2}$\"),TeX(\"$t_{obs}$\"))\r\n    }\r\n  }else if (test == 'upper.tail'){\r\n    xcoords = c(q_a, obs)\r\n    ycoords = c(0,0)\r\n    xendcoords = c(q_a, obs)\r\n    yendcoords = c(d_a, d_obs)\r\n    if(dist == 'z'){\r\n      lbl1 = c(TeX(\"$z_{1-\\\\alpha}$\"),TeX(\"$z_{obs}$\"))\r\n    }else{\r\n      lbl1 = c(TeX(\"$t_{1-\\\\alpha}$\"),TeX(\"$t_{obs}$\"))\r\n    }\r\n  }else{\r\n    xcoords = c(-q_a, obs)\r\n    ycoords = c(0,0)\r\n    xendcoords = c(-q_a, obs)\r\n    yendcoords = c(d_a, d_obs)\r\n    if(dist == 'z'){\r\n      lbl1 = c(TeX(\"$z_{\\\\alpha}$\"), TeX(\"$z_{obs}$\"))\r\n    }else{\r\n      lbl1 = c(TeX(\"$t_{\\\\alpha}$\") ,TeX(\"$t_{obs}$\"))\r\n    }\r\n  }\r\n  \r\n  if(test == 'two.tailed'){\r\n    final = p+stat_function(fun = func,\r\n                            args = args,\r\n                            size = 1)+\r\n      geom_segment(aes(x=xcoords[1:2],\r\n                       y=ycoords[1:2],\r\n                       xend=xendcoords[1:2],\r\n                       yend=yendcoords[1:2]),\r\n                   size = 0.9,\r\n                   linetype = 'dashed')+\r\n      geom_segment(aes(x=xcoords[3],\r\n                       y=ycoords[3],\r\n                       xend=xendcoords[3],\r\n                       yend=yendcoords[3]),\r\n                   size = 0.9,\r\n                   linetype = 'dashed')+\r\n      geom_point(aes(x = xcoords[1:2], y = ycoords[1:2]), size = 3)+\r\n      geom_label(aes(x = xcoords[1:2], y = ycoords[1:2]-0.025), label = lbl1[1:2], size = txt.sz)+\r\n      geom_point(aes(x = xcoords[3], y = ycoords[3]), size = 3)+\r\n      geom_label(aes(x = xcoords[3], y = ycoords[3]-0.025), label = lbl1[3], size = txt.sz)+\r\n      geom_hline(yintercept = 0, size = 1)+\r\n      xlab(xlabel)+\r\n      ylab('Probability Density')+\r\n      ggtitle(TeX('Distribution under $H_0$'))+\r\n      theme(axis.title.x = element_text(size = 14),\r\n            axis.title.y = element_text(size = 14))\r\n  }else{\r\n    final = p+stat_function(fun = func,\r\n                            args = args,\r\n                            size = 1)+\r\n      geom_segment(aes(x=xcoords,\r\n                       y=ycoords,\r\n                       xend=xendcoords,\r\n                       yend=yendcoords), \r\n                   size = rep(0.9, length(xcoords)), \r\n                   linetype = rep('dashed',length(xcoords)))+\r\n      geom_point(aes(x = xcoords, y = ycoords), size = 3)+\r\n      geom_label(aes(x = xcoords, y = ycoords-0.025), label = lbl1, size = txt.sz)+\r\n      geom_hline(yintercept = 0, size = 1)+\r\n      xlab(xlabel)+\r\n      ylab('Probability Density')+\r\n      ggtitle(TeX('Distribution under $H_0$'))+\r\n      theme(axis.title.x = element_text(size = 12),\r\n            axis.title.y = element_text(size = 12))\r\n  }\r\n  \r\n  \r\n  return(final)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# standard error for a sample proportion \r\none.sample.prop.SE = function(phat, n){\r\n  SE = sqrt((phat*(1-phat))/n)\r\n  return(SE)\r\n}\r\n\r\n\r\n# confidence interval for a population proportion \r\none.sample.prop.CI = function(phat, n, alpha = 0.05, verbose = FALSE){\r\n  SE = one.sample.prop.SE(phat, n)\r\n  standard.score = qnorm(1-(alpha/2))\r\n  MOE = standard.score*SE\r\n  lower.bound = phat-MOE\r\n  upper.bound = phat+MOE\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(rep('-', 50), collapse = '')))\r\n    print(noquote(paste0('Estimate = ', round(phat, 4))))\r\n    print(noquote(paste0('Critical Value  = ', round(standard.score, 4))))\r\n    print(noquote(paste0('Estimated Standard Error = ', round(SE, 4))))\r\n    print(noquote(paste0('Margin of error = ', round(MOE, 4))))\r\n    print(noquote(paste0((1-alpha)*100, ' % CI = ', paste0('[', round(max(lower.bound,0),4), ',',\r\n                                                           round(min(upper.bound, 1), 4), ']', \r\n                                                           collapse = ''))))\r\n    print(noquote(paste0(rep('-', 50), collapse = '')))\r\n  }\r\n  return(c(lower.bound, upper.bound))\r\n}\r\n\r\n\r\n\r\n# test for a population proportion \r\none.sample.prop.test = function(p0, phat, n, alpha = 0.05, test = c('lower.tail','upper.tail','two.tailed'),\r\n                                verbose = TRUE){\r\n  \r\n  estimate.SE = one.sample.prop.SE(p0, n)\r\n  Zobs = (phat - p0)/estimate.SE\r\n  if(test == 'two.tailed'){\r\n    critical.value = qnorm((1-(alpha/2)))\r\n    alt.hyp = 'p != '\r\n    pvalue = 2*(1-pnorm(abs(Zobs)))\r\n  }else if(test == 'lower.tail'){\r\n    critical.value = qnorm(alpha)\r\n    alt.hyp = 'p < '\r\n    pvalue = pnorm(Zobs)\r\n  }else{\r\n    critical.value = qnorm(1-alpha)\r\n    alt.hyp = 'p > '\r\n    pvalue = 1-pnorm(Zobs)\r\n  }\r\n  \r\n  CI = one.sample.prop.CI(phat, n, alpha)\r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: p0 = ', p0)))\r\n    print(noquote(paste0('HA: ', alt.hyp, p0)))\r\n    print(noquote(paste0('estimate = ', round(phat,4))))\r\n    print(noquote(paste0('Estimated Standard Error = ', round(estimate.SE,4))))\r\n    print(noquote(paste0('Critical Value = ', round(critical.value, 4))))\r\n    print(noquote(paste0((1-alpha)*100, '% CI = ', paste0('[', max(round(CI[1],4), 0),',',\r\n                                                          round(CI[2],4),']', \r\n                                                          collapse = ''))))\r\n    print(noquote(paste0('Test statistic = ', round(Zobs, 4))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n  }\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#standard error for a sample mean \r\none.sample.t.SE = function(s, n){\r\n  SE = s/sqrt(n)\r\n  return(SE)\r\n}\r\n\r\n\r\n#confidence interval for a population mean \r\none.sample.t.CI = function(xbar, s, n, alpha = 0.05, verbose = FALSE){\r\n  SE = one.sample.t.SE(s, n)\r\n  t.score = qt(1-(alpha/2), df = n-1)\r\n  MOE = t.score*SE\r\n  lower.bound = xbar-MOE\r\n  upper.bound = xbar+MOE\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(rep('-', 50), collapse = '')))\r\n    print(noquote(paste0('Estimate = ', round(xbar, 4))))\r\n    print(noquote(paste0('Critical Value  = ', round(t.score, 4))))\r\n    print(noquote(paste0('Estimated Standard Error = ', round(SE, 4))))\r\n    print(noquote(paste0('Margin of error = ', round(MOE, 4))))\r\n    print(noquote(paste0((1-alpha)*100, ' % CI = ', paste0('[', round(lower.bound,4),',', \r\n                                                           round(upper.bound,4), ']',\r\n                                                           collapse = ''))))\r\n    print(noquote(paste0(rep('-', 50), collapse = '')))\r\n  }\r\n  return(c(lower.bound, upper.bound))\r\n}\r\n\r\n\r\n# one sample t test \r\none.sample.t.test = function(m0, xbar, s, n, alpha = 0.05, test = c('lower.tail','upper.tail','two.tailed'),\r\n                             verbose = TRUE){\r\n  \r\n  df = n - 1\r\n  estimate.SE = one.sample.t.SE(s, n)\r\n  tobs = (xbar - m0)/estimate.SE\r\n  if(test == 'two.tailed'){\r\n    critical.value = qt((1-(alpha/2)), df = df)\r\n    alt.hyp = 'm != '\r\n    pvalue = 2*(1-pt(abs(tobs), df = df))\r\n  }else if(test == 'lower.tail'){\r\n    critical.value = qt(alpha, df = df)\r\n    alt.hyp = 'm < '\r\n    pvalue = pt(tobs, df = df)\r\n  }else{\r\n    critical.value = qt(1-alpha, df = df)\r\n    alt.hyp = 'm > '\r\n    pvalue = 1-pt(tobs, df = df)\r\n  }\r\n  \r\n  CI = one.sample.t.CI(xbar, s, n, alpha)\r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: m0 = ', m0)))\r\n    print(noquote(paste0('HA: ', alt.hyp, m0)))\r\n    print(noquote(paste0('Estimate = ', round(xbar,4))))\r\n    print(noquote(paste0('Estimated Standard Error = ', round(estimate.SE,4))))\r\n    print(noquote(paste0('Critical Value = ', round(critical.value, 4))))\r\n    print(noquote(paste0((1-alpha)*100, '% CI = ', paste0('[', max(round(CI[1],4), 0),',',\r\n                                                          round(CI[2],4),']', \r\n                                                          collapse = ''))))\r\n    print(noquote(paste0('Test statistic = ', round(tobs, 4))))\r\n    print(noquote(paste0('Degrees of Freedom = ', round(df, 4))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n  }\r\n} \r\n\r\n\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n  titlePanel('One Sample Hypothesis Tests'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 selectInput(inputId = \"param\",\r\n                             label = \"Population Parameter\",\r\n                             choices = c(\"mean\", \"proportion\"),\r\n                             selected = 'mean'),\r\n                 \r\n                 selectInput(inputId = \"test\",\r\n                             label = \"Choose inference type:\",\r\n                             choices = c(\"confidence.interval\",\"upper.tail\", \r\n                                         \"lower.tail\", 'two.tailed'),\r\n                             selected = 'upper.tail'),\r\n                 \r\n                 sliderInput(inputId = \"alpha\",\r\n                             label = \"Significance Level:\",\r\n                             min = 0,\r\n                             max = 1,\r\n                             step = 0.01,\r\n                             value = 0.05),\r\n                 \r\n                 numericInput(inputId = \"n\",\r\n                              label = \"Sample Size: \",\r\n                              value = 100),\r\n                 \r\n                 conditionalPanel(condition = \"input.param == 'proportion'\",\r\n                                  numericInput(inputId = \"p0\",\r\n                                              label = \"Set null value H_0: p0 = \",\r\n                                              value = 0.5,\r\n                                              min = 0,\r\n                                              max = 1,\r\n                                              step = 0.01),\r\n                                  numericInput(inputId = \"obs.prop\",\r\n                                               label = \"Observed proportion: \",\r\n                                               min = 0,\r\n                                               max = 1,\r\n                                               step = 0.01,\r\n                                               value = 0.1)),\r\n                                  \r\n                 conditionalPanel(condition = \"input.param == 'mean'\",\r\n                                  numericInput(inputId = \"m0\",\r\n                                               label = \"Set null value H_0: m0 = \",\r\n                                               value = 0),\r\n                                  numericInput(inputId = \"obs.mean\",\r\n                                               label = \"Observed Sample Mean: \",\r\n                                               value = 5),\r\n                                  numericInput(inputId = \"obs.s\",\r\n                                               label = \"Observed Sample Standard Dev.: \",\r\n                                               value = 1)),\r\n                 \r\n                 actionButton(\"run\",\"Run Inference\"),\r\n    ),\r\n    mainPanel(plotOutput(\"plotresult\"), \r\n              verbatimTextOutput(\"summary\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n    observeEvent(input$run,  output$plotresult <- renderPlot({\r\n      if(input$param == 'mean'){\r\n        distrib = 't'\r\n        estimate = input$obs.mean\r\n        standard.score = qt(1-input$alpha/2, input$n - 1)\r\n        SE = (input$obs.s/sqrt(input$n))\r\n        test.stat = (input$obs.mean - input$m0)/SE\r\n        LV = estimate - 4*SE\r\n        UV = estimate + 4*SE\r\n        LB = estimate - standard.score*SE\r\n        UB = estimate + standard.score*SE\r\n      }else{\r\n        distrib = 'z'\r\n        estimate = input$obs.prop\r\n        standard.score = qnorm(1-input$alpha/2)\r\n        SE = sqrt(input$p0*(1-input$p0)/input$n)\r\n        test.stat = (input$obs.prop - input$p0)/SE\r\n        LB = max(estimate - standard.score*SE, 0)\r\n        LV = max(estimate - 4*SE, 0)\r\n        UB = min(estimate + standard.score*SE, 1)\r\n        UV = min(estimate + 4*SE, 1)\r\n      }\r\n      \r\n      if(input$test == 'confidence.interval'){\r\n        out = ggplot()+xlim(LV, UV)+\r\n          theme_bw()+\r\n          stat_function(fun = dnorm,\r\n                        args = list(mean = estimate, sd = SE),\r\n                        geom = 'area',\r\n                        fill = 'lightgrey')+\r\n          stat_function(fun = dnorm,\r\n                        args = list(mean = estimate, sd = SE),\r\n                        size = 2)+\r\n          geom_vline(xintercept = LB, linetype = 'dotted', size = 2)+\r\n          geom_vline(xintercept = UB, linetype = 'dotted', size = 2)+\r\n          geom_text(aes(x = estimate, y = dnorm(estimate, mean = estimate, sd = SE)/2),\r\n                     label = paste0(100*(1-input$alpha), '%', ' CI'), size = 8)+\r\n          xlab('Estimate')+\r\n          ylab('Probability Density')+\r\n          theme(axis.text = element_text(size = 12),\r\n                axis.title = element_text(size = 14))\r\n          \r\n      }else{\r\n        out = gen.density.plot(n = input$n, \r\n                               dist = distrib,\r\n                               obs = test.stat,\r\n                               alpha = input$alpha,\r\n                               test = input$test)\r\n      }\r\n      \r\n      plot(out)\r\n      \r\n    }))\r\n    \r\n    observeEvent(input$run,  output$summary <- renderPrint({\r\n      if(input$test == 'confidence.interval'){\r\n        if(input$param == 'mean'){\r\n          one.sample.t.CI(xbar = input$obs.mean,\r\n                          s = input$obs.s,\r\n                          n = input$n,\r\n                          alpha = input$alpha,\r\n                          verbose = T)\r\n          \r\n        }else{\r\n          one.sample.prop.CI(phat = input$obs.prop,\r\n                             n = input$n,\r\n                             alpha = input$alpha,\r\n                             verbose = T)\r\n        }\r\n      }else{\r\n        if(input$param == 'mean'){\r\n          one.sample.t.test(m0 = input$m0, \r\n                            xbar = input$obs.mean,\r\n                            s = input$obs.s,\r\n                            n = input$n,\r\n                            alpha = input$alpha,\r\n                            test = input$test)\r\n          \r\n        }else{\r\n          one.sample.prop.test(p0 = input$p0,\r\n                               phat = input$obs.prop,\r\n                               n = input$n,\r\n                               alpha = input$alpha,\r\n                               test = input$test)\r\n        }\r\n      }\r\n      \r\n    }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/one_sample_hypothesis_tests/webfiles/\")\r\n","type":"text"}]
