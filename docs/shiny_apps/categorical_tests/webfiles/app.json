[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(knitr)\r\nlibrary(kableExtra)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(ggpubr)\r\nlibrary(grid)\r\nlibrary(latex2exp)\r\n\r\n\r\nconvert.keystroke = function(keystroke_input){\r\n  indata = strsplit(keystroke_input, ',')[[1]]\r\n  if(sum(suppressWarnings(is.na(as.numeric(indata))))>0){\r\n    converted = as.character(indata)\r\n    values = unique(converted)\r\n    counts = summary(as.factor(converted))\r\n  }else{\r\n    converted = as.numeric(indata)\r\n    if(sum(converted%%1)>0){\r\n      h = hist(converted, plot = F)\r\n      values = h$breaks[-1]\r\n      counts = h$counts\r\n    }else{\r\n      values = unique(converted)\r\n      counts = summary(as.factor(converted))\r\n    }\r\n  }\r\n  df = cbind.data.frame(X = values, frequency = counts)\r\n  return(df)\r\n}\r\n\r\n# a function to conduct the chi-square goodness of fit test\r\nchi.squared.GOF.test = function(observed.ct=NULL, expected.freq=NULL, expected.ct = NULL,  alpha = 0.05, \r\n                                verbose = TRUE){\r\n  \r\n  n = sum(observed.ct)\r\n  if(is.null(expected.ct)){\r\n    if(is.null(expected.freq)){\r\n      stop('missing one of expected.freq or expected.ct')\r\n    }else{\r\n      expected.ct = n*expected.freq \r\n    }\r\n  }else{\r\n    expect.freq = expected.ct/n\r\n  }\r\n  df = length(observed.ct)-1\r\n  chi.dist = (observed.ct - expected.ct)^2 / expected.ct\r\n  chi.obs = sum(chi.dist)\r\n  tabres = cbind.data.frame(Observed = observed.ct, Expected = round(expected.ct, 3), \r\n                            Distance = round(chi.dist, 3))\r\n  row.names(tabres) = paste0('category ', 1:length(observed.ct))\r\n  \r\n  null.hyp = paste0(paste0('P(category ', 1:length(observed.ct), ') = '), round(expected.freq, 4))\r\n  alt.hyp ='The probabilities are different than those stated in H0'\r\n  \r\n  crit = qchisq(1-alpha, df)\r\n  pvalue = 1-pchisq(chi.obs, df)\r\n  \r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('H0: ', null.hyp)))\r\n    print(noquote(paste0('HA: ', alt.hyp)))\r\n    print(noquote(paste0('Degrees of freedom = ', df)))\r\n    print(paste0(rep('-', 54), collapse = ''))\r\n    print(tabres)\r\n    print(paste0(rep('-', 54), collapse = ''))\r\n    print(noquote(paste0('test statistic = ', round(chi.obs, 4))))\r\n    if(df == 1){\r\n      print(noquote(paste0('Z-statistic = ', round(sqrt(chi.obs), 4))))\r\n    }\r\n    print(noquote(paste0('critical value = ', round(crit, 4))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n# chi square test of independence and homogeneity\r\nchi.squared.test = function(cont.table, var1.name = NULL, var2.name = NULL,  alpha = 0.05, \r\n                            test = c('homogeneity','independence'), verbose = TRUE,\r\n                            return.stats = FALSE, ...){\r\n  \r\n  rowcats = row.names(cont.table)\r\n  colcats = colnames(cont.table)\r\n  r.t = rowSums(cont.table)\r\n  c.t = colSums(cont.table)\r\n  n = sum(cont.table)\r\n  exp.cts = outer(r.t, c.t)/n\r\n  ct.dists = (cont.table - exp.cts)^2/exp.cts\r\n  chi.obs = sum(ct.dists)\r\n  df = prod(dim(cont.table)-1)\r\n  \r\n  final.observed = cbind(rbind(cont.table, c.t), c(r.t, n))\r\n  if(is.null(var1.name)){\r\n    colnames(ct.dists) = paste0('Var A: category ', colcats)\r\n    colnames(exp.cts) = paste0('Var A: category ', colcats)\r\n    colnames(final.observed) = c(paste0('Var A: category ', colcats),'Row Total')\r\n  }else{\r\n    colnames(ct.dists) = paste0(var1.name, ': category ', colcats)\r\n    colnames(exp.cts) = paste0(var1.name, ': category ', colcats)\r\n    colnames(final.observed) = c(paste0(var1.name, ': category ', colcats),'Row Total')\r\n  }\r\n  \r\n  if(is.null(var2.name)){\r\n    row.names(exp.cts) = paste0('Var B: category ', rowcats)\r\n    row.names(ct.dists) = paste0('Var B: category ', rowcats)\r\n    row.names(final.observed) = c(paste0('Var B: category ', rowcats),'Column Total')\r\n  }else{\r\n    row.names(exp.cts) = paste0(var2.name, ': category ', rowcats)\r\n    row.names(ct.dists) = paste0(var2.name, ': category ', rowcats)\r\n    row.names(final.observed) = c(paste0(var2.name, ': category ', rowcats),'Column Total')\r\n  }\r\n  \r\n\r\n  \r\n  \r\n  crit = qchisq(1-alpha, df)\r\n  if(test == 'homogeneity'){\r\n    null.hyp = 'The conditional distributions of the rows are homogeneous'\r\n    alt.hyp = 'The conditional distributions of the rows are not homogeneous'\r\n  }else{\r\n    null.hyp = 'The row variable and column variable are independent'\r\n    alt.hyp = 'The row variable and column variable are dependent'\r\n  }\r\n  pvalue = 1-pchisq(chi.obs, df)\r\n  \r\n  \r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: ', null.hyp)))\r\n    print(noquote(paste0('HA: ', alt.hyp)))\r\n    print(noquote(paste0('Degrees of freedom = ', df)))\r\n    print(noquote(paste0(rep('-', 54), collapse = '')))\r\n    print('Observed Counts')\r\n    print(round(final.observed, 4))\r\n    print('Expected Counts: (R * C)/n')\r\n    print(round(exp.cts, 4))\r\n    print('Distances: (observed - expected)^2 / expected')\r\n    print(round(ct.dists, 4))\r\n    print(noquote(paste0(rep('-', 54), collapse = '')))\r\n    print(noquote(paste0('test statistic = ', round(chi.obs, 4))))\r\n    if(df == 1){\r\n      print(noquote(paste0('Z-statistic = ', round(sqrt(chi.obs), 4))))\r\n    }\r\n    print(noquote(paste0('critical value = ', round(crit, 4))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n    \r\n  }\r\n  \r\n  if(return.stats){\r\n    return(list(final.obs = final.observed, expected.cts = exp.cts, residuals = ct.dists))\r\n  }\r\n}\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  \r\n  titlePanel('Non-Parametric Hypothesis Tests'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 selectInput(inputId = \"which\",\r\n                             label = \"Choose a test\",\r\n                             choices = c(\"goodness of fit\", \"chi-square\"),\r\n                             selected = \"goodness of fit\"),\r\n                 \r\n                 sliderInput(inputId = \"alpha\",\r\n                             label = \"Significance Level:\",\r\n                             min = 0,\r\n                             max = 1,\r\n                             step = 0.01,\r\n                             value = 0.05),\r\n                 \r\n                 fileInput(\"myfileinput\", \r\n                           \"Please choose a csv File\", \r\n                           multiple = FALSE, \r\n                           accept = c(\"text/csv\", \"text/comma-separated-values,text/plain\", \".csv\")),\r\n                 \r\n                 selectInput('myselectinput1','Select Response Variable', \"\"),\r\n                 \r\n                 conditionalPanel(condition = \"input.which == 'goodness of fit'\",\r\n                                  textInput(inputId = \"expected_props\", \r\n                                            label = \"Enter k Comma Separated Expected Proportions H_0\", \r\n                                            value = \"\",\r\n                                            placeholder = \"0.3,0.3,0.3,...\"),\r\n                                  textInput(inputId = \"expected_cts\", \r\n                                            label = \"(optional) Enter Comma Separated Expected Counts H_0\", \r\n                                            value = \"\",\r\n                                            placeholder = '10,10,10,...')),\r\n                 conditionalPanel(condition = \"input.which == 'chi-square'\",\r\n                                  selectInput('myselectinput2','Select Explanatory Variable', \"\"),\r\n                                  selectInput(inputId = \"test\",\r\n                                              label = \"Choose a test\",\r\n                                              choices = c(\"independence\", \"homogeneity\"),\r\n                                              selected = \"independence\")),\r\n                 \r\n                 \r\n                 actionButton(\"run\",\"Run Inference\"),\r\n    ),\r\n    mainPanel(tableOutput('mytable'),\r\n              tableOutput('contable'),\r\n              plotOutput('modelplot'),\r\n              verbatimTextOutput(\"summary\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  \r\n  #Reactive to store loaded data\r\n  reactives <- reactiveValues(\r\n    \r\n    mydata = NULL\r\n    \r\n  )\r\n  \r\n  #Observe file being selected\r\n  observeEvent(input$myfileinput, {\r\n    \r\n    #Store loaded data in reactive\r\n    reactives$mydata <- read.csv(file = input$myfileinput$datapath)\r\n    #browser()\r\n    #Update select input\r\n    updateSelectInput(session, inputId = 'myselectinput1', label = 'Select the response variable', choices  = colnames(reactives$mydata))\r\n    updateSelectInput(session, inputId = 'myselectinput2', label = 'Select the explanatory variable', choices  = colnames(reactives$mydata))\r\n    \r\n  })\r\n  \r\n  #Data table\r\n  output$mytable <- renderTable({ \r\n    \r\n    head(reactives$mydata)\r\n    \r\n  })\r\n  \r\n  observeEvent(input$run, output$contable <- function(){\r\n    \r\n    #browser()\r\n    if(input$which == 'goodness of fit'){\r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      df = cbind.data.frame(names(summary(Y)), summary(Y))\r\n      kable(df, format = 'html', digits = 2, col.names = c('Category', 'Count'),\r\n            caption = 'Summary of Observed Counts',\r\n            row.names = F, booktabs = T, escape = F)%>%kable_styling(bootstrap_options = 'striped')\r\n    }else if(input$which == 'chi-square'){\r\n      #browser()\r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      idx2 = which(colnames(reactives$mydata) == input$myselectinput2)\r\n      X = as.factor(reactives$mydata[,idx2])\r\n      cts = as.numeric(table(X,Y))\r\n      \r\n      df = as.data.frame(matrix(cts, nrow = length(summary(X)), ncol = length(summary(Y)),\r\n                                byrow = F))\r\n      row.names(df) = names(summary(X))\r\n      kable(df, format = 'html', digits = 2, col.names = names(summary(Y)),\r\n            caption = 'Summary of Observed Counts',\r\n            row.names = T, booktabs = T, escape = F)%>%kable_styling(bootstrap_options = 'striped')\r\n    }\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  observeEvent(input$run, output$modelplot <- renderPlot({\r\n    \r\n    \r\n    #browser()\r\n    if(input$which == 'goodness of fit'){\r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      df = cbind.data.frame(names(summary(Y)), summary(Y))\r\n      k = length(summary(Y))\r\n      \r\n      expected_props = as.numeric(strsplit(input$expected_props, ',')[[1]])\r\n      if(length(expected_props) != 0){\r\n        if(length(expected_props) != k ){\r\n          showNotification(stop(paste0('Expected ', k, \r\n                                       ' proportions - user supplied ', \r\n                                       length(expected_props))),\r\n                           type = 'error')\r\n        }\r\n      }else{\r\n        expected_props = NULL\r\n      }\r\n      expected_cts = as.numeric(strsplit(input$expected_cts, ',')[[1]])\r\n      if(length(expected_cts) != 0){\r\n        if(length(expected_cts) != k ){\r\n          showNotification(stop(paste0('Expected ', k, \r\n                                       ' counts - user supplied ', \r\n                                       length(expected_cts))),\r\n                           type = 'error')\r\n        }\r\n      }else{\r\n        expected_cts = NULL\r\n      }\r\n      \r\n      if(is.null(expected_cts)){\r\n        if(!is.null(expected_props)){\r\n          expected_cts = length(Y)*expected_props\r\n        }else{\r\n          showNotification(stop('must enter wither expected proportions or expected counts under H_0'),\r\n                           duration = 8,\r\n                           type = 'error')\r\n        }\r\n      }\r\n      \r\n      df.cts = cbind.data.frame(Count = c(summary(Y),expected_cts),\r\n                                Category = as.factor(rep(names(summary(Y)), 2)),\r\n                                Model = as.factor(c(rep('Observed',k), rep('Expected',k))))\r\n      \r\n      fp = ggplot(data = df.cts)+theme_pander()+\r\n        geom_bar(aes(x = Category, y = Count, fill = Model), \r\n                 stat = 'identity', color = 'black', position = position_dodge(),\r\n                 alpha = 0.5)+\r\n        #scale_fill_manual('darkviolet','lavender')+\r\n        scale_fill_brewer(palette=\"Paired\")+\r\n        xlab(input$myselectinput1)+\r\n        ylab('Count')+\r\n        theme(axis.text = element_text(size = 12),\r\n              axis.title = element_text(size = 14))\r\n      \r\n    }else if(input$which == 'chi-square'){\r\n      #browser()\r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      idx2 = which(colnames(reactives$mydata) == input$myselectinput2)\r\n      X = as.factor(reactives$mydata[,idx2])\r\n      cts = as.numeric(table(X,Y))\r\n      xcats = names(summary(X))\r\n      ycats = names(summary(Y))\r\n      r = length(xcats)\r\n      c = length(ycats)\r\n      \r\n      df = as.data.frame(matrix(cts, nrow = length(summary(X)), ncol = length(summary(Y)),\r\n                                byrow = F))\r\n      row.names(df) = xcats\r\n      colnames(df) = ycats\r\n      \r\n      labs = expand.grid(Category1 = xcats, Category2 = ycats)\r\n      \r\n      #debug(chi.squared.test)\r\n      output = chi.squared.test(cont.table = df,\r\n                       var1.name = input$myselectinput1,\r\n                       var2.name = input$myselectinput2,\r\n                       alpha = input$alpha,\r\n                       test = input$test,\r\n                       verbose = T,\r\n                       return.stats = T)\r\n      \r\n      plotdata.lf = cbind.data.frame(labs,\r\n                                     Model = as.factor(c(rep('Observed', r*c),rep('Expected', r*c))),\r\n                                     Frequency = c(as.numeric(cts), \r\n                                                   as.numeric(output$expected.cts)))\r\n      \r\n      plotdata.lf$Category1 = as.factor(plotdata.lf$Category1)\r\n      plotdata.lf$Category2 = as.factor(plotdata.lf$Category2)\r\n      plist = list()\r\n      pals = rep(c('Reds','Greens','Blues','Purples','Oranges','Greys'), r)\r\n      for(i in 1:r){\r\n        currentcat = levels(plotdata.lf$Category1)[i]\r\n        subdata = subset(plotdata.lf, Category1 == currentcat)\r\n        plist[[i]] = ggplot(data = subdata)+theme_pander()+\r\n          geom_bar(aes(x = Category2, y = Frequency, fill = Model), \r\n                   stat = 'identity', color = 'black', position = position_dodge2(),\r\n                   alpha = 0.8)+\r\n          #scale_fill_manual('darkviolet','lavender')+\r\n          scale_fill_brewer(palette=pals[i])+\r\n          xlab('')+\r\n          ylab('')+\r\n          ggtitle(paste0(input$myselectinput2, \":\", currentcat))+\r\n          theme(axis.text = element_text(size = 12),\r\n                axis.title = element_text(size = 14))\r\n        \r\n      }\r\n      \r\n      if((r-1) > 1){\r\n        xp = ggarrange(plotlist = plist, nrow = r-1, ncol = 2)\r\n      }else{\r\n        xp = ggarrange(plotlist = plist, nrow = 1, ncol = r)\r\n      }\r\n      \r\n      fp = annotate_figure(xp, \r\n                           left = textGrob('Count', rot = 90, vjust = 1, gp = gpar(cex = 1)),\r\n                           bottom = textGrob(input$myselectinput1, gp = gpar(cex = 1)))\r\n    }\r\n    \r\n    \r\n    plot(fp)\r\n    \r\n    \r\n  }))\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  observeEvent(input$run,  output$summary <- renderPrint({\r\n    \r\n    #browser()\r\n    if(input$which == 'goodness of fit'){\r\n      \r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      df = cbind.data.frame(names(summary(Y)), summary(Y))\r\n      k = length(summary(Y))\r\n      \r\n      expected_props = as.numeric(strsplit(input$expected_props, ',')[[1]])\r\n      if(length(expected_props) != 0){\r\n        if(length(expected_props) != k ){\r\n          showNotification(stop(paste0('Expected ', k, \r\n                                       ' proportions - user supplied ', \r\n                                       length(expected_props))),\r\n                           type = 'error')\r\n        }\r\n      }else{\r\n        expected_props = NULL\r\n        showNotification(warning('No expected proportions were entered'),\r\n                         duration = 8,\r\n                         type = 'warning')\r\n      }\r\n      expected_cts = as.numeric(strsplit(input$expected_cts, ',')[[1]])\r\n      if(length(expected_cts) != 0){\r\n        if(length(expected_cts) != k ){\r\n          showNotification(stop(paste0('Expected ', k, \r\n                                       ' counts - user supplied ', \r\n                                       length(expected_cts))),\r\n                           type = 'error')\r\n        }\r\n      }else{\r\n        expected_cts = NULL\r\n        showNotification(warning('No expected counts were entered'),\r\n                         duration = 8,\r\n                         type = 'warning')\r\n      }\r\n      \r\n      \r\n      chi.squared.GOF.test(observed.ct = summary(Y),\r\n                           expected.ct = expected_cts,\r\n                           expected.freq = expected_props,\r\n                           alpha = input$alpha,\r\n                           verbose = T)\r\n      \r\n      \r\n    }else if(input$which == 'chi-square'){\r\n      idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n      Y = as.factor(reactives$mydata[,idx1])\r\n      idx2 = which(colnames(reactives$mydata) == input$myselectinput2)\r\n      X = as.factor(reactives$mydata[,idx2])\r\n      cts = as.numeric(table(X,Y))\r\n      \r\n      df = as.data.frame(matrix(cts, nrow = length(summary(X)), ncol = length(summary(Y)),\r\n                                byrow = F))\r\n      row.names(df) = paste0(input$myselectinput2, names(summary(X)))\r\n      colnames(df) = paste0(input$myselectinput1, names(summary(Y)))\r\n      \r\n      chi.squared.test(cont.table = df,\r\n                       var1.name = input$myselectinput1,\r\n                       var2.name = input$myselectinput2,\r\n                       alpha = input$alpha,\r\n                       test = input$test,\r\n                       verbose = T)\r\n    }\r\n    \r\n  }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/categorical_tests'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/categorical_tests/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/categorical_tests/webfiles/\")\r\n","type":"text"}]
