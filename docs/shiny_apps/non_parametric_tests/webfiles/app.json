[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(latex2exp)\r\nlibrary(gridExtra)\r\nlibrary(ggpubr)\r\n\r\n\r\n\r\n# the classic sign test\r\nsign.test = function(p0, x1, x2, alpha = 0.05, test = c('lower.tail','upper.tail','two.tail'),\r\n                     verbose = TRUE){\r\n  \r\n  diffs = x1 - x2\r\n  total.signs = sum(diffs>0)+sum(diffs<0)\r\n  positive.signs = sum(diffs>0)\r\n  \r\n  phat = positive.signs/total.signs\r\n  SE = sqrt(phat*(1-phat)/total.signs)\r\n  if(test == 'two.tail'){\r\n    upper.bound = qbinom(1-(alpha/2), total.signs, phat)\r\n    lower.bound = qbinom(alpha/2, total.signs, phat)\r\n    alt.hyp = 'p != '\r\n    pvalue = 2*(1-pbinom(positive.signs-1, total.signs, p0))\r\n    if(pvalue > 1){\r\n      pvalue = 1\r\n    }\r\n  }else if(test == 'lower.tail'){\r\n    upper.bound = qbinom(1-alpha/2, total.signs, phat)\r\n    lower.bound = qbinom(alpha/2, total.signs, phat)\r\n    alt.hyp = 'p < '\r\n    pvalue = pbinom(positive.signs, total.signs, p0)\r\n  }else{\r\n    upper.bound = qbinom(1-(alpha/2), total.signs, phat)\r\n    lower.bound = qbinom(alpha/2, total.signs, phat)\r\n    alt.hyp = 'p > '\r\n    pvalue = 1-pbinom(positive.signs-1, total.signs, p0)\r\n  }\r\n  \r\n  CI = c(lower.bound/total.signs, upper.bound/total.signs)\r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: p0 = ', p0)))\r\n    print(noquote(paste0('HA: ', alt.hyp, p0)))\r\n    print(noquote(paste0('# of positive signs = ', positive.signs)))\r\n    print(noquote(paste0('# of total signs = ', total.signs)))\r\n    print(noquote(paste0('Estimated P(+ sign) = ', round(phat, 4))))\r\n    print(noquote(paste0('Estimated Standard Error P(+ sign) = ', round(SE,4))))\r\n    print(noquote(paste0((1-alpha)*100, '% CI P(+ sign) = ', paste0('[', round(CI[1],4),',',\r\n                                                                    round(CI[2],4),']', \r\n                                                                    collapse = ''))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrank.sum.stat=function(X, Y){\r\n  D = sort(c(X, Y), decreasing = FALSE)\r\n  ranks = match(X,D)\r\n  S = sum(ranks)\r\n  return(S)\r\n}\r\n\r\n\r\n# the classic Wilcoxon sum-rank test for two indepdent samples\r\nWilcoxon.rank.sum.test = function(m0, X=NULL, Y=NULL, S=NULL, n1=NULL, n2=NULL, alpha = 0.05, \r\n                                  test = c('lower.tail','upper.tail','two.tail'), verbose = TRUE){\r\n  \r\n  if(is.null(S)){\r\n    S = rank.sum.stat(X,Y)\r\n    n1 = length(X)\r\n    n2 = length(Y)\r\n  }\r\n  \r\n  U = S - (n1*(n1+1))/2\r\n  if(test == 'two.tail'){\r\n    upper.bound = qwilcox(1-(alpha/2), n1, n2)\r\n    lower.bound = qwilcox(alpha/2, n1, n2)\r\n    alt.hyp = 'true location shift != '\r\n    pvalue = 2*pwilcox(U, n1, n2)\r\n    if(pvalue > 1){\r\n      pvalue = 1\r\n    }\r\n  }else if(test == 'lower.tail'){\r\n    upper.bound = qwilcox(1-(alpha/2), n1, n2)\r\n    lower.bound = qwilcox(alpha/2, n1, n2)\r\n    alt.hyp = 'true location shift is < '\r\n    pvalue = pwilcox(U, n1, n2)\r\n  }else{\r\n    upper.bound = qwilcox(1-(alpha/2), n1, n2)\r\n    lower.bound = qwilcox(alpha/2, n1, n2)\r\n    alt.hyp = 'true location shift is > '\r\n    pvalue = 1-pwilcox(U, n1, n2)\r\n  }\r\n  \r\n  CI = c(lower.bound, upper.bound)\r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: the true location shift = ', m0)))\r\n    print(noquote(paste0('HA: ', alt.hyp, m0)))\r\n    print(noquote(paste0('Sign rank statistic = ', S)))\r\n    print(noquote(paste0('Mann-Whitney U = ', round(U, 4))))\r\n    print(noquote(paste0('E[S] = ', round((n1*(n1+n2+1))/2, 4 ))))\r\n    print(noquote(paste0('SE(S) =', round(sqrt( (n1*n2*(n1+n2+1))/12 ), 4 ))))\r\n    print(noquote(paste0((1-alpha)*100, '% CI for S = ', paste0('[',max(round(CI[1],4),0),',',\r\n                                                                round(CI[2],4),']', \r\n                                                                collapse = ''))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n#A simple function to compute the signed-rank statistic\r\nsign.rank.stat = function(X,Y, ...){\r\n  diffs = X-Y\r\n  if(sum(diffs == 0)>0){\r\n    omit = which(diffs == 0)\r\n    abs.diffs = abs(diffs[-omit])\r\n  }else{\r\n    abs.diffs = abs(diffs)\r\n  }\r\n  negative = which(diffs[-omit] < 0)\r\n  positive = which(diffs[-omit] > 0)\r\n  ranks = rank(abs.diffs, ...)\r\n  signed.ranks = ranks\r\n  signed.ranks[negative] = -1*ranks[negative]\r\n  W = sum(signed.ranks)\r\n  return(list(W = W, differences = diffs, absolute.diff = abs.diffs, ranks = ranks, signed.ranks = signed.ranks))\r\n}\r\n# the classic Wilcoxon sign-rank test for two dependent samples\r\n\r\nWilcoxon.sign.rank.test = function(m0, X=NULL, Y=NULL, W=NULL, n=NULL,  alpha = 0.05, \r\n                                   test = c('lower.tail','upper.tail','two.tail'), verbose = TRUE,\r\n                                   ...){\r\n  \r\n  if(is.null(W)){\r\n    W = sign.rank.stat(X,Y,...)$W\r\n    if(length(X)==length(Y)){\r\n      n = length(X)\r\n      EW = m0\r\n      VW = (n*(n+1)*(2*n +1))/6\r\n      Z = (W-m0)/sqrt(VW)\r\n    }else{\r\n      stop('length(X) != length(Y)!...stopping')\r\n    }\r\n  }\r\n  \r\n  \r\n  if(test == 'two.tail'){\r\n    crit = qnorm(1-alpha/2, EW, sqrt(VW))\r\n    alt.hyp = 'true location shift != '\r\n    pvalue = 2*(1-pnorm(W, EW, sqrt(VW)))\r\n    if(pvalue > 1){\r\n      pvalue = 1\r\n    }\r\n  }else if(test == 'lower.tail'){\r\n    crit = qnorm(alpha, EW, sqrt(VW))\r\n    alt.hyp = 'true location shift < '\r\n    pvalue = pnorm(W, EW, sqrt(VW))\r\n  }else{\r\n    crit = qnorm(1-alpha, EW, sqrt(VW))\r\n    alt.hyp = 'true location shift > '\r\n    pvalue = 1-pnorm(W, EW, sqrt(VW))\r\n  }\r\n  \r\n  upper.bound = qnorm(1-alpha/2, EW, sqrt(VW))*sqrt(VW)+EW\r\n  lower.bound = qnorm(alpha/2, EW, sqrt(VW))*sqrt(VW)+EW\r\n  CI = c(lower.bound, upper.bound)\r\n  decision = ifelse(pvalue<alpha, 'reject H0', 'fail to reject H0')\r\n  if(isTRUE(verbose)){\r\n    print(noquote(paste0(paste0(rep('=', 20), collapse = ''), ' test results ', paste0(rep('=', 20), collapse = ''))))\r\n    print(noquote(paste0('test type = ', test)))\r\n    print(noquote(paste0('H0: true location shift = ', m0)))\r\n    print(noquote(paste0('HA: ', alt.hyp, m0)))\r\n    print(noquote(paste0('Rank-Sum statistic = ', W)))\r\n    print(noquote(paste0('E[W] = ', round( EW, 4 ))))\r\n    print(noquote(paste0('SE(W) =', round(sqrt( VW ), 4 ))))\r\n    print(noquote(paste0('Approximate Z-statistic = ', round(Z, 4))))\r\n    print(noquote(paste0((1-alpha)*100, '% CI for W = ', paste0('[',round(CI[1],2),',',\r\n                                                                round(CI[2],2),']', \r\n                                                                collapse = ''))))\r\n    print(noquote(paste0('critical value = ', round(crit, 4))))\r\n    print(noquote(paste0('Pvalue = ', round(pvalue, 4))))\r\n    print(noquote(paste0('Decision: ', decision)))\r\n    print(noquote(paste0(rep(\"=\", 54), collapse = '')))\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  \r\n  titlePanel('Non-Parametric Hypothesis Tests'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 selectInput(inputId = \"which\",\r\n                             label = \"Choose a test\",\r\n                             choices = c(\"classic sign test\", \"rank sum test\", \"sign rank test\"),\r\n                             selected = \"classic sign test\"),\r\n                 \r\n                 selectInput(inputId = \"test\",\r\n                             label = \"Choose inference type:\",\r\n                             choices = c(\"confidence.interval\",\"upper.tail\", \r\n                                         \"lower.tail\", \"two.tail\"),\r\n                             selected = \"two.tail\"),\r\n                 \r\n                 sliderInput(inputId = \"alpha\",\r\n                             label = \"Significance Level:\",\r\n                             min = 0,\r\n                             max = 1,\r\n                             step = 0.01,\r\n                             value = 0.05),\r\n                 \r\n                 fileInput(\"myfileinput\", \r\n                           \"Please choose a csv File\", \r\n                           multiple = FALSE, \r\n                           accept = c(\"text/csv\", \"text/comma-separated-values,text/plain\", \".csv\")),\r\n                 \r\n                 selectInput('myselectinput1','Select variable 1', \"\"),\r\n                 \r\n                 selectInput('myselectinput2','Select variable 2', \"\"),\r\n                 \r\n                 conditionalPanel(condition = \"input.which == 'rank sum test'\",\r\n                                  numericInput(inputId = \"rst.null\",\r\n                                               label = \"Set null H_0: true location shift = \",\r\n                                               value = 0)),\r\n                 conditionalPanel(condition = \"input.which == 'sign rank test'\",\r\n                                  numericInput(inputId = \"srt.null\",\r\n                                               label = \"Set null H_0: true location shift = \",\r\n                                               value = 0)),\r\n                 conditionalPanel(condition = \"input.which == 'classic sign test'\",\r\n                                  numericInput(inputId = \"p0\",\r\n                                               label = \"Set null H_0: P(+ Sign) = \",\r\n                                               value = 0.5,\r\n                                               min = 0,\r\n                                               max = 1,\r\n                                               step = 0.01)),\r\n                 \r\n                 \r\n                 actionButton(\"run\",\"Run Inference\"),\r\n    ),\r\n    mainPanel(tableOutput('mytable'), \r\n              verbatimTextOutput(\"summary\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  \r\n  #Reactive to store loaded data\r\n  reactives <- reactiveValues(\r\n    \r\n    mydata = NULL\r\n    \r\n  )\r\n  \r\n  #Observe file being selected\r\n  observeEvent(input$myfileinput, {\r\n    \r\n    #Store loaded data in reactive\r\n    reactives$mydata <- read.csv(file = input$myfileinput$datapath)\r\n    #browser()\r\n    #Update select input\r\n    updateSelectInput(session, inputId = 'myselectinput1', label = 'Select the first var', choices  = colnames(reactives$mydata))\r\n    updateSelectInput(session, inputId = 'myselectinput2', label = 'Select the first var', choices  = colnames(reactives$mydata))\r\n    \r\n  })\r\n  \r\n  #Data table\r\n  output$mytable <- renderTable({ \r\n    \r\n    head(reactives$mydata)\r\n    \r\n  })\r\n  \r\n  \r\n  observeEvent(input$run,  output$summary <- renderPrint({\r\n    \r\n    #browser()\r\n    idx1 = which(colnames(reactives$mydata) == input$myselectinput1)\r\n    idx2 = which(colnames(reactives$mydata) == input$myselectinput2)\r\n    X = reactives$mydata[,idx1]\r\n    Y = reactives$mydata[,idx2]\r\n    if(input$which == 'classic sign test'){\r\n      \r\n      sign.test(p0 = input$p0, \r\n                x1 = X,\r\n                x2 = Y,\r\n                alpha = input$alpha,\r\n                test = input$test,\r\n                verbose = T)\r\n      \r\n    }else if(input$which == 'rank sum test'){\r\n      \r\n      Wilcoxon.rank.sum.test(m0 = input$rst.null, \r\n                             X = X,\r\n                             Y = Y,\r\n                             alpha = input$alpha,\r\n                             test = input$test,\r\n                             verbose = T)\r\n      \r\n    }else if(input$which == 'sign rank test'){\r\n      #browser()\r\n      #debug(Wilcoxon.sign.rank.test)\r\n      Wilcoxon.sign.rank.test(m0 = input$srt.null,\r\n                              X = X,\r\n                              Y = Y,\r\n                              alpha = input$alpha, \r\n                              test = input$test,\r\n                              verbose = T)\r\n      \r\n    }\r\n    \r\n  }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/non_parametric_tests/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/non_parametric_tests/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/non_parametric_tests/webfiles/\")\r\n","type":"text"}]
