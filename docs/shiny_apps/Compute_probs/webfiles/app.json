[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\n#source('C:/Users/Bruin/Desktop/GS Academia/TA/Teaching STAT 251/stat251_tools.R')\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(ggpubr)\r\nlibrary(ggthemes)\r\nlibrary(latex2exp)\r\nlibrary(shiny)\r\n\r\n#this function is a helper function for gen.density.plot\r\nd_limit <- function(x, input){\r\n  if(input$rv == 'Uniform'){\r\n    y = dunif(x, min = input$min, max = input$max)\r\n  }else if(input$rv == 'Normal'){\r\n    y = dnorm(x, input$mean, input$sd)\r\n  }\r\n  \r\n  \r\n  if(input$probtype == 'P(X = k)'){\r\n    return(y)\r\n  }else if (input$probtype == 'P(X >= k)'){\r\n    y[which(x <= input$k)] <- NA\r\n    return(y)\r\n  }else if(input$probtype == 'P(X <= k)'){\r\n    y[which(x >= input$k)] <- NA\r\n    return(y)\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\nui <- fluidPage(\r\n  titlePanel('Compute Probabilties From Different Distributions'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n                 #input select\r\n                 selectInput(inputId = \"probtype\",\r\n                             label = \"Select probability\",\r\n                             choices = c(\"P(X = k)\", \"P(X <= k)\", \"P(X >= k)\"),\r\n                             selected = \"P(X = k)\"),\r\n                 \r\n                 numericInput(inputId = 'k',\r\n                              label = \"k\",\r\n                              min = 0,\r\n                              value = 1),\r\n                 \r\n                 selectInput(inputId = \"rv\",\r\n                             label = \"Select Random Variable\",\r\n                             choices = c(\"Binomial\", \"Poisson\", \"Uniform\", \"Exponential\", \"Normal\"),\r\n                             selected = \"Binomial\"),\r\n                 #Binomial dist\r\n                 conditionalPanel(condition = \"input.rv == 'Binomial'\",\r\n                                  h5(\"Binomial Parameters\"),\r\n                                  numericInput(inputId = \"ntrials\",\r\n                                              label = \"Number of Trials:\",\r\n                                              min = 1,\r\n                                              value = 1),\r\n                                  numericInput(inputId = \"probsuccess\",\r\n                                              label = \"Probability of Success:\",\r\n                                              min = 0,\r\n                                              max = 1,\r\n                                              value = 0.5,\r\n                                              step = 0.05)),\r\n                 #Poisson dist\r\n                 conditionalPanel(condition = \"input.rv == 'Poisson'\",\r\n                                  h5(\"Poisson Parameters\"),\r\n                                  numericInput(inputId = \"rate1\",\r\n                                              label = \"Rate:\",\r\n                                              min = 0,\r\n                                              value = 1,\r\n                                              step = 0.5)),\r\n                 #Uniform dist\r\n                 conditionalPanel(condition = \"input.rv == 'Uniform'\",\r\n                                  h5(\"Uniform Parameters\"),\r\n                                  numericInput(inputId = \"min\",\r\n                                              label = \"Minimum Value:\",\r\n                                              value = 0),\r\n                                  numericInput(inputId = \"max\",\r\n                                              label = \"Maximum Value:\",\r\n                                              value = 1)),\r\n                 #Exponential dist\r\n                 conditionalPanel(condition = \"input.rv == 'Exponential'\",\r\n                                  h5(\"Exponential Parameters\"),\r\n                                  numericInput(inputId = \"rate2\",\r\n                                              label = \"Rate Parameter:\",\r\n                                              min = 0,\r\n                                              max = 100,\r\n                                              value = 1)),\r\n                 #Normal dist\r\n                 conditionalPanel(condition = \"input.rv == 'Normal'\",\r\n                                  h5(\"Normal Parameters\"),\r\n                                  numericInput(inputId = \"mean\",\r\n                                              label = \"Mean:\",\r\n                                              min = 0,\r\n                                              max = 100,\r\n                                              value = 0),\r\n                                  numericInput(inputId = \"sd\",\r\n                                              label = \"Standard Deviation:\",\r\n                                              min = 0.1,\r\n                                              max = 100,\r\n                                              value = 1)),\r\n                 \r\n                 actionButton(\"Compute\",\"Compute Result\")),\r\n    mainPanel(\"\", plotOutput(\"distPlot\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n  observeEvent(input$Compute,  output$distPlot <- renderPlot({\r\n      set.seed(111)\r\n      #browser()\r\n    \r\n    \r\n      #Binomial \r\n      if(input$rv == 'Binomial'){\r\n        df = data.frame(success = 0:input$ntrials, \r\n                        prob = dbinom(x = 0:input$ntrials, size = input$ntrials, prob = input$probsuccess))\r\n        if(input$probtype == 'P(X = k)'){\r\n          df=df %>% mutate(condition = ifelse(success == input$k, as.character(input$k), \"failure\")) \r\n          lbl = paste0('$P(X = ', input$k, ') = ')\r\n        }else if (input$probtype == 'P(X <= k)'){\r\n           df=df %>% mutate(condition = ifelse(success <= input$k, as.character(input$k), \"failure\")) \r\n           lbl = paste0('$P(X \\\\leq ', input$k, ') = ')\r\n        }else{\r\n          df=df %>% mutate(condition = ifelse(success >= input$k, as.character(input$k), \"failure\"))\r\n          lbl = paste0('$P(X \\\\geq ', input$k, ') = ')\r\n        }\r\n        \r\n        px = round(sum(df$prob[which(df$condition == input$k)]),2)\r\n        ggplot(data = df, aes(x = success, y = prob, fill = condition)) +\r\n          geom_bar(stat = 'identity', color = 'black') +\r\n          geom_col() +\r\n          geom_text(aes(label = round(prob,2), y = prob + 0.01),\r\n                    position = position_dodge(0.9),\r\n                    size = 3,\r\n                    vjust = 0)+\r\n          geom_text(aes(x = mean(success),\r\n                        y = max(prob) + 0.08),\r\n                    label = TeX(paste0(lbl, px, '$')),\r\n                    size = 5,\r\n                    vjust = 0)+\r\n          scale_y_continuous(limits = c(0, min(max(df$prob+0.15), 1)))+\r\n          labs(title = paste0(\"Probability of X =\", input$k, \" successes.\"),\r\n               subtitle = TeX(paste0(\"$X \\\\sim binom(n = \", input$ntrials, \", p = \", input$probsuccess, ')$')),\r\n               x = \"Number of Successes\",\r\n               y = \"Probability\")+\r\n          theme_classic2()+\r\n          theme(legend.position = 'none')\r\n      \r\n        \r\n        \r\n        \r\n        \r\n      #poisson\r\n      }else if(input$rv == 'Poisson'){\r\n        df = data.frame(events = 0:ceiling(input$rate1+5*input$rate1), \r\n                        prob = dpois(x = 0:ceiling(input$rate1+5*input$rate1), \r\n                                     lambda = input$rate1))\r\n        if(input$probtype == 'P(X = k)'){\r\n          df=df %>% mutate(condition = ifelse(events == input$k, as.character(input$k), \"failure\")) \r\n          lbl = paste0('$P(X = ', input$k, ') = ')\r\n        }else if (input$probtype == 'P(X <= k)'){\r\n          df=df %>% mutate(condition = ifelse(events <= input$k, as.character(input$k), \"failure\")) \r\n          lbl = paste0('$P(X \\\\leq ', input$k, ') = ')\r\n        }else{\r\n          df=df %>% mutate(condition = ifelse(events >= input$k, as.character(input$k), \"failure\"))\r\n          lbl = paste0('$P(X \\\\geq ', input$k, ') = ')\r\n        }\r\n        \r\n        px = round(sum(df$prob[which(df$condition == input$k)]),2)\r\n        ggplot(data = df, aes(x = events, y = prob, fill = condition)) +\r\n          geom_bar(stat = 'identity', color = 'black') +\r\n          geom_col() +\r\n          geom_text(aes(label = round(prob,2), y = prob + 0.01),\r\n                    position = position_dodge(0.9),\r\n                    size = 3,\r\n                    vjust = 0)+\r\n          geom_text(aes(x = mean(events),\r\n                        y = max(prob) + 0.08),\r\n                    label = TeX(paste0(lbl, px, '$')),\r\n                    size = 5,\r\n                    vjust = 0)+\r\n          scale_y_continuous(limits = c(0, min(max(df$prob+0.15), 1)))+\r\n          labs(title = paste0(\"Probability of X =\", input$k, \" Events.\"),\r\n               subtitle = TeX(paste0(\"$X\\\\sim Poisson(\\\\lambda = \", input$rate1, ')$')),\r\n               x = \"Number of Events\",\r\n               y = \"Probability\")+\r\n          theme_classic2()+\r\n          theme(legend.position = 'none')\r\n        \r\n        \r\n        \r\n      # Uniform\r\n      }else if(input$rv == 'Uniform'){\r\n        if(input$probtype == 'P(X = k)'){\r\n          px = round(dunif(input$k, input$min, input$max),2)\r\n          lbl = paste0('$P(X = ', input$k, ') = ')\r\n        }else if (input$probtype == 'P(X <= k)'){\r\n          px = round(punif(input$k, input$min, input$max),2)\r\n          lbl = paste0('$P(X \\\\leq ', input$k, ') = ')\r\n        }else{\r\n          px = 1-round(punif(input$k, input$min, input$max),2)\r\n          lbl = paste0('$P(X \\\\geq ', input$k, ') = ')\r\n        }\r\n        \r\n        ggplot(data.frame(x = c(input$min, input$max)), aes(x = x))+\r\n          stat_function(fun = d_limit,\r\n                        args = list(input = input), \r\n                        geom = \"area\", \r\n                        fill = \"cyan3\", \r\n                        alpha = 0.4)+\r\n          geom_text(aes(x = median(input$min:input$max),\r\n                        y = (1/(input$max - input$min))/2),\r\n                    label = TeX(paste0(lbl, px, '$')),\r\n                    size = 5,\r\n                    vjust = 0)+\r\n          stat_function(fun = dunif,\r\n                        args = list(min = input$min, max = input$max),\r\n                        size = 1)+\r\n          labs(title = paste0(\"Probability of X\"),\r\n               subtitle = TeX(paste0(\"$X\\\\sim Uniform(\\\\min = \", input$min, ', \\\\max = ',input$max, ')$')),\r\n               x = \"X\",\r\n               y = \"Probability(X)\")+\r\n          theme_classic2()+\r\n          theme(legend.position = 'none')\r\n      #   d = runif(n=input$ss, min = input$min, max = input$max)\r\n      # }else if(input$model == 'Exponential'){\r\n      #   d = rexp(n=input$ss, rate = input$rate2)\r\n    }else if(input$rv == 'Normal'){\r\n      if(input$probtype == 'P(X = k)'){\r\n        px = round(dnorm(input$k, input$mean, input$sd),2)\r\n        lbl = paste0('$P(X = ', input$k, ') = ')\r\n      }else if (input$probtype == 'P(X <= k)'){\r\n        px = round(pnorm(input$k, input$mean, input$sd),2)\r\n        lbl = paste0('$P(X \\\\leq ', input$k, ') = ')\r\n      }else{\r\n        px = 1-round(pnorm(input$k, input$mean, input$sd),2)\r\n        lbl = paste0('$P(X \\\\geq ', input$k, ') = ')\r\n      }\r\n    \r\n      ggplot(data.frame(x = c(input$mean - 4*input$sd, input$mean + 4*input$sd)), aes(x = x))+\r\n        stat_function(fun = d_limit,\r\n                      args = list(input = input), \r\n                      geom = \"area\", \r\n                      fill = \"cyan3\", \r\n                      alpha = 0.4)+\r\n        geom_text(aes(x = input$mean,\r\n                      y = dnorm(input$mean, input$mean, input$sd)/2),\r\n                  label = TeX(paste0(lbl, px, '$')),\r\n                  size = 5,\r\n                  vjust = 0)+\r\n        stat_function(fun = dnorm,\r\n                      args = list(mean = input$mean, sd = input$sd),\r\n                      size = 1)+\r\n        labs(title = paste0(\"Probability of X\"),\r\n             subtitle = TeX(paste0(\"$X\\\\sim N(\\\\mu = \", input$mean, ', \\\\sigma = ',input$sd, ')$')),\r\n             x = \"X\",\r\n            y = \"Probability(X)\")+\r\n        theme_classic2()+\r\n        theme(legend.position = 'none')\r\n    }\r\n  }))\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Compute_probs/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Compute_probs/webfiles/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/Compute_probs/webfiles/\")\r\n\r\n\r\n\r\n","type":"text"}]
