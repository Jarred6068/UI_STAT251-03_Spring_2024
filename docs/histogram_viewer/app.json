[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  titlePanel('Histogram Sandbox'),\r\n  sidebarLayout(\r\n    sidebarPanel(width = 4, \r\n      #input select\r\n      selectInput(inputId = \"model\",\r\n      label = \"Select Model\",\r\n      choices = c(\"Bernoulli\", \"Binomial\", \"Poisson\", \"Uniform\", \"Exponential\", \"Normal\"),\r\n      selected = \"Normal\"),\r\n      #Bernoulli dist\r\n      conditionalPanel(condition = \"input.model == 'Bernoulli'\",\r\n                       h5(\"Bernoulli Parameters\"),\r\n                       sliderInput(inputId = \"prob1\",\r\n                                   label = \"Probability of Success:\",\r\n                                   min = 0,\r\n                                   max = 1,\r\n                                   value = 0.5)),\r\n      #Binomial dist\r\n      conditionalPanel(condition = \"input.model == 'Binomial'\",\r\n                       h5(\"Binomial Parameters\"),\r\n                       sliderInput(inputId = \"ntrials\",\r\n                                   label = \"Number of Trials:\",\r\n                                   min = 0,\r\n                                   max = 100,\r\n                                   value = 20),\r\n                       sliderInput(inputId = \"prob2\",\r\n                                   label = \"Probability of Success:\",\r\n                                   min = 0,\r\n                                   max = 1,\r\n                                   value = 0.5)),\r\n      #Poisson dist\r\n      conditionalPanel(condition = \"input.model == 'Poisson'\",\r\n                       h5(\"Poisson Parameters\"),\r\n                       sliderInput(inputId = \"rate1\",\r\n                                   label = \"Rate:\",\r\n                                   min = 1,\r\n                                   max = 10,\r\n                                   value = 1)),\r\n      #Uniform dist\r\n      conditionalPanel(condition = \"input.model == 'Uniform'\",\r\n                       h5(\"Uniform Parameters\"),\r\n                       sliderInput(inputId = \"min\",\r\n                                   label = \"Minimum Value:\",\r\n                                   min = 0,\r\n                                   max = 100,\r\n                                   value = 0),\r\n                       sliderInput(inputId = \"max\",\r\n                                   label = \"Maximum Value:\",\r\n                                   min = 0,\r\n                                   max = 100,\r\n                                   value = 1)),\r\n      #Exponential dist\r\n      conditionalPanel(condition = \"input.model == 'Exponential'\",\r\n                       h5(\"Exponential Parameters\"),\r\n                       sliderInput(inputId = \"rate2\",\r\n                                   label = \"Rate Parameter:\",\r\n                                   min = 0,\r\n                                   max = 100,\r\n                                   value = 1)),\r\n      #Normal dist  \r\n      conditionalPanel(condition = \"input.model == 'Normal'\",\r\n                       h5(\"Normal Parameters\"),\r\n                       sliderInput(inputId = \"mean\",\r\n                                   label = \"Mean:\",\r\n                                   min = 0,\r\n                                   max = 100,\r\n                                   value = 0),\r\n                       sliderInput(inputId = \"sd\",\r\n                                   label = \"Standard Deviation:\",\r\n                                   min = 0.1,\r\n                                   max = 100,\r\n                                   value = 1)),\r\n      sliderInput(inputId = \"ss\",\r\n                  label = \"Sample Size:\", \r\n                  min = 10, \r\n                  max = 10000, \r\n                  value = 50),\r\n    \r\n    \r\n    ),\r\n      mainPanel(plotOutput(\"distPlot\"))\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output){\r\n  output$distPlot <- renderPlot({\r\n    if(input$model == 'Bernoulli'){\r\n      d = rbinom(n=input$ss, size = 1, p = input$prob1)\r\n    }else if(input$model == 'Binomial'){\r\n      d = rbinom(n=input$ss, size = input$ntrials, p = input$prob2)\r\n    }else if(input$model == 'Poisson'){\r\n      d = rpois(n=input$ss, lambda = input$rate1)\r\n    }else if(input$model == 'Uniform'){\r\n      d = runif(n=input$ss, min = input$min, max = input$max)\r\n    }else if(input$model == 'Exponential'){\r\n      d = rexp(n=input$ss, rate = input$rate2)\r\n    }else if(input$model == 'Normal'){\r\n      d = rnorm(n=input$ss, mean = input$mean, sd = input$sd)\r\n    }\r\n  \r\n  \r\n    hist(d,\r\n         col='darkorchid',\r\n         xlab=\"Sample\",\r\n         main=\"Histogram of Sample\")},\r\n    height=300)\r\n}\r\n# server <- function(input, output) {\r\n#   output$distPlot <- renderPlot({\r\n#     hist(rnorm(input$ss),col='darkorchid',xlab=\"Sample\",main=\"Standard Normally Distributed Sample\")},\r\n#     height=300\r\n#   )\r\n# }\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"deploy_app.R","content":"path = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/shiny_apps/HistoPlot/'\r\noutpath = 'C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/histogram_viewer/'\r\nshinylive::export(appdir = path, destdir = outpath)\r\nhttpuv::runStaticServer(\"C:/Users/Bruin/Documents/GitHub/UI_STAT251-03_Spring_2024/docs/histogram_viewer/\")\r\n","type":"text"}]
